# Import data

## Learning objectives

This sessionâ€™s **overall learning outcome** is to:

1.  

**Specific objectives** are to:

<!-- TODO: Revise objectives to fit how I did it in advanced -->

1.  Learn the difference between "messy" and "tidy" data, including how
    to create tidy data to simplify your analysis.

## "Messy" vs. "tidy" data

::: {.callout-note collapse="true"}
## Instructor note

This session usually takes a fair amount of time relative to the other
sessions. The Quarto session is right afterwards and since it usually is
done quicker than other sessions, it's fine if this session takes up
time in the Quarto session.

For the reading section, emphasize the characteristics of a "tidy"
dataset.
:::

::: callout-note
## Reading task: \~10 minutes

The concept of "tidy" data was popularized in an
[article](https://www.jstatsoft.org/v59/i10/paper) by Hadley Wickham and
described in more detail in the [Tidy Data
chapter](https://r4ds.had.co.nz/tidy-data.html) of the *R for Data
Science* online book. Before we continue with tidy data, we need to
cover something that is related to the concept of "tidy" and that has
already come up in this course: the `{tidyverse}`. The `{tidyverse}` is
an ecosystem of R packages that are designed to work well together, that
all follow a strong "[design philosophy](https://design.tidyverse.org/)"
and common [style guide](https://style.tidyverse.org/). This makes
combining these packages in the tidyverse much easier. We teach the
tidyverse because of these above mentioned reasons.

Ok, back to "tidy data". A tidy dataset is when:

-   Each variable has its own column (e.g. "Body Weight").
-   Each observation has its own row (e.g. "Person").
-   Each value has its own cell (e.g. "Body weight for a person at a
    specific date").

Take a look at the example "tidy" and "messy" data frames (also called
"tibbles" in the tidyverse) below. Think about why each may be
considered "tidy" or "messy". What do you notice between the tidy
versions and the messier versions?

```{r}
# Datasets come from tidyr
# Tidy:
table1

# Partly tidy:
table2

# Messier:
table3

# Messy:
table4a

# Messy:
table4b
```

The "most" tidy version is `table1` as each column describes their
values (e.g. population is population size), each row is unique (e.g.
first row is for values from Afghanistan from 1999), and each cell is an
explicit value representative of its column and row.

`table2` is a "long" version of `table1` so it is partly "tidy", but it
doesn't satisfy the rule that each variable has a column, since `count`
represents both cases and population size.

On the other hand, `table3` is messy because the `rate` column values
are a composite of two other column values (cases and population), when
it should be a single number (a percent). Both `table4a` and `table4b`
have columns with ambiguous values inside. For example, you can't tell
from the data what the values in the `1999` column contain.

Tidy data has a few notable benefits:

1.  Time spent preparing your data to be tidy from the beginning can
    save days of added work and frustration in the long run.
2.  "Tidy data" is a conceptual framework that allows you to easily
    build off and wrangle (i.e. "manipulate", "clean up", "manage") data
    in simpler and easy-to-interpret ways, especially when used within
    the framework of the tidyverse.

The concept of tidy data also gives rise to "tidy code" for wrangling.
By using "verbs" (R functions) and chaining them together in "sentences"
(in a sequential pipeline), you can construct meaningful and readable
code that describes in plainer English what you are doing to the data.
This is one simple way that you can enhance the reproducibility of your
code.
:::

## Managing and working with data in R

::: {.callout-note appearance="minimal" collapse="true"}
## Instructor note

After they read it, go over and emphasize the functions shown in the
table that we will be teaching.
:::

:::::: callout-note
## Reading task: \~5 minutes

When working with data, there are a few principles to follow:

-   You should always save your original raw dataset in the `data-raw/`
    folder.
    -   *Note*: Whether or not you save data to `data-raw/` depends on
        how you collected the data and how many collaborators are on
        your team. You may end up storing and processing the data in
        another folder as a project of its own.
-   **Never** edit your raw data directly and save it in a separate
    location.
-   Only work with your raw data using R code. *Don't manually edit it*.
    Manual editing doesn't leave a history of what you've done to it, so
    you can't go back and see what you've done. Always keep a history of
    any changes you've made to the data, preferably by using R code.
-   Save the edited data as another dataset and store it in the `data/`
    folder.

When wrangling your data with R code, make sure to:

-   Document what you did to your data and why you did it, to help you
    remember later on (by using hashes to indicate comments and non-code
    text).
-   Write the code in a way that is as descriptive as possible and is
    readable enough to understand what is being done to the data.
-   Keep the code simple: Don't be clever, be clear. Clear code is
    easier to understand than clever and sometimes overly-complex code.

## Loading in a dataset

::: callout-note
## Reading task: \~5 minutes

We've been using a teaching dataset that we load from a package, mainly
so that we can focus on getting familiar with data wrangling. However,
there will come a time when you want to wrangle your own data. There are
several ways to load in a dataset, which are listed below. *Don't run
these code, just read for now*.

1.  Using the RStudio menu
    `File -> Import Dataset -> From Text/Excel/SPSS/SAS/Stata`
    (depending on your file type you want to import).

2.  If the file is a `.csv` file, use `readr::read_csv()` to import the
    dataset, for instance with the `nhanes_small`:

    ``` r
    nhanes_small <- readr::read_csv(here::here("data/nhanes_small.csv"))
    ```

3.  If the dataset is a `.rda` file, use `load()`:

    ``` r
    load(here::here("data/dataset_name.rda"))    
    ```

    This loads the dataset into your R session so that you can use it
    again.

For SAS, SPSS, or Stata files, you can use the package
[haven](https://haven.tidyverse.org/) to import those types of data
files into R.
:::

## R object naming practices

::: callout-note
## Reading task: \~5 minutes

If you've ever seen some old R code, you may notice that function and
object names are usually short. For instance, `str()` is the function to
see the "object structure". Back then, there were no tab-completion
tools, so typing out long names was painful. Now we have powerful
auto-completion tools. So this also means that when you write R code,
you should use descriptive names instead of short ones. For instance,
the object `weight_kilo` could have been named something like `x`. But
this doesn't tell us what that is and doesn't help us write better code.

The ability to read, understand, modify, and write simple pieces of code
is an essential skill for a modern data analysts. So! Here's some tips
for writing R code:

-   *Be descriptive* with your names.
-   As with natural languages like English, write as if someone will
    read your code.
-   Stick to a [*style guide*](https://style.tidyverse.org/).

Even though R doesn't care about naming, spacing, and indenting, it
really matters how your code looks. Coding is just like writing. Even
though you may go through a brainstorming note-taking stage of writing,
you eventually need to write correctly so others can *read and
understand* what you are trying to say. In coding, brainstorming is
fine, but eventually you need to code in a readable way. That's why
using a [style guide](https://style.tidyverse.org/) is really important.
:::

## Making code more readable

::: {.callout-note appearance="minimal" collapse="true"}
## Instructor note

Go over this section together, not as a code-along, but instead with
this section on the projector. Emphasize the "naming" vs "styling"
issues topic.
:::

The code below is in some way either *wrong* or incorrectly written.
What is wrong with it? You don't need to understand what the code does,
just comment on the readability and anything else that might come up.

``` r
# Object names
DayOne
T <- FALSE
c <- 9

# Spacing
x[,1]
x[ ,1]
mean (x, na.rm = TRUE)
mean( x, na.rm = TRUE )
height<-feet*12+inches
df $ z
x <- 1 : 10
```

These issues can actually be broken down into two categories:

-   Naming issues: This issue is harder to fix and comes with experience
    and knowledge. For instance, the `T <- FALSE` is wrong because `T`
    already exists and is a short hand for `TRUE` while `c <- 9` is
    wrong because `c` is already the name of the function `c()`. You
    normally don't want to name code based on something that already
    exists in base R ("naming conflicts" between packages is fine
    though, since there are ways to identify and fix that). These issues
    can only be fixed manually.

-   Styling issues: This is much easier to fix and can largely be done
    automatically.

Rather than manually editing code to fit a style, we can instead do it
automatically. RStudio itself has a built-in automatic styling tool,
found in the menu item `Code -> Reformat Code`. Let's try this styling
out together. Copy and paste the code above into the `R/learning.R`
file. *Don't* run this code, we'll just edit it to improve the styling.
After pasting it, run the "Reformat Code" menu item.

The `{tidyverse}` [style guide](https://style.tidyverse.org/) also has a
package called `{styler}` that automatically fixes code to fit the style
guide. With `{styler}` you can style multiple files at once, one file at
a time, or based on code you select and highlight. We will make a lot of
use of styling the file we are working on instead. We can do that
through {{< var keybind.styler >}}, which should show the "Style active
file" option. You'll try it out in the next exercise.

The thing to note, is that `{styler}` isn't perfect, for instance, it
can't change objects that are named `T` or `c` to something else. But
`{styler}` is a good starting point to manually fixing up your code.

Paste the code again and run `{styler}` on the file with the
{{< var keybind.styler >}}. Fixes it for us!

## Packages, data, and file paths

A major strength of R is in its ability for others to easily create
packages that simplify doing complex tasks (e.g. running mixed effects
models with the `{lme4}` package or creating figures with the
`{ggplot2}` package) and for anyone to easily install and use that
package. So make use of packages!

For instance, a "metapackage" we will use throughout the course is
called `{tidyverse}`, which we can load by writing this at the top of
our script files:

```{r}
#| filename: "R/learning.R"
library(tidyverse)
```

Managing which packages our analysis depends on is covered in the
intermediate and advanced courses. In this course, we will get you to
write `library()` at the top of the file for each package that the
file's code depends on. Open up the `R/learning.R` file and add it to
the top of the script.

## :book: Reading task: Encountering problems and finding help

**Time: \~10 minutes**


::: {.callout-note collapse="true"}
## Instructor note

Briefly go over this section with them, especially emphasize "Restart
R", reading the error or warning message, and checking for missing
commas, brackets or misspelled words.
:::

::: callout-note

![A common and frequent experience when working in R. Artwork by
[\@allison_horst](https://github.com/allisonhorst/stats-illustrations).](../images/art-debugging.jpg){#fig-art-debugging
width="90%"}

You *will* encounter problems and errors when working with R, and you
will encounter them *all the time*. In fact, a large amount of your time
in R will be spent figuring out solutions to these errors ("debugging").
For this course, we have a short
[cheatsheet](../includes/cheatsheet.pdf) that lists the tools and
functions we will cover, which can help with problems forgetting
function names or their usage. RStudio also has many cheatsheets of its
own, which you can find with the Command Palette
({{< var keybind.palette >}}, then type "cheatsheet"). However, even
with these cheatsheets, you will still encounter other problems like
errors or warnings. Error messages will appear in red text in your
Console and will start with the word "Error:". Warning messages are also
in red text, but are often either harmless or informative, so make sure
to read the message and see if it says "Error" or not. Here are some
initial steps to take when you encounter an error:

1.  **First, try to stay calm**; problems happen to everyone, no matter
    their skill level. You *can fix it*! :smile:
2.  **Read through the error message and try to understand what R is
    telling you**. Some common error messages include:
    -   *"Could not find function"*: Usually means that you have
        misspelled the function or an R package has not loaded properly.
    -   *"Object not found"*: Usually means that you have not
        initialized (created) the object or the object is initialized
        but empty.
    -   *"Error in..."*: Usually means that you are referring to an
        object that doesn't exist.
    -   *"Unexpected symbol in..."*: Usually means that you misspelled a
        variable or object name, so R can't find it.
3.  **Go over the code again and carefully check for any mistakes:**
    -   Missing commas or pipes?
    -   Missing end brackets like `]`, `)`, or `}`?
    -   Capitalized something that shouldn't be capitalized?
    -   Object or column name misspelled?
    -   Forgot to load your data before working on it?
    -   Forgot to load or re-load your packages? Packages are
        automatically unloaded when you exit RStudio and R. So you need
        to load them each new session with the `library()` function.
4.  **Go back to the start of the code and run each line one at a
    time**, to see where the problem occurs. You will get an opportunity
    to practice this later, once you are working with bigger chunks of
    code.

If you still can't find the problem, here are some other steps to take:

1.  **Restart the R session with** {{< var keybind.restart-r >}} **or
    with the menu item `Session -> Restart R`**. Then load your packages
    (and data if needed) and run the code from the beginning, tracking
    which objects get created, and if the proper object name is used
    later on.

2.  (Rarely need to do) **Close/re-open RStudio and try again.**

3.  **Use `help()` or `?` to access built-in documentation about a
    function or package.** You may be using the function incorrectly, so
    find out more about the function by looking at the built-in
    documentation. The documentation will open up in the "Help" pane of
    RStudio (bottom right-hand corner). **Try it out:** Enter either of
    the following commands into the Console and run it (hit `Enter`).

    ```{r}
#| filename: "Console"
#| eval: false
?colnames

help(colnames)
    ```

    Sometimes, this documentation can be hard to read and seem overly
    complex for a beginner. You can also try finding the website for the
    package you are having trouble with, as they often have guides that
    are a little easier to understand. The
    [tidyverse](https://www.tidyverse.org/packages/) packages all have
    amazing documentation that you can use to help you with problems you
    may have.

4.  **Consider explaining the problem out loud to a colleague or
    friend.** (or even a rubber duck!) You might find that, in verbally
    going through the problem and explaining it, you will likely come up
    with the solution yourself.

5.  **Take a break and come back to it later!**

6.  **Google it.** Chances are that someone has already encountered that
    error and has asked about it online. In fact, those who are
    "experts" in coding languages like R are experts largely because of
    their skill in knowing the right words or terms or questions to ask
    Google. Usually googling the error message will be enough to find
    the answer, but sometimes you'll need to include "R" or "rstats" and
    the relevant package or function as a keyword in your search.

7.  If all else fails, you can always turn to the trusty **online R
    community**. Check
    [StackOverflow](https://stackoverflow.com/questions/tagged/r), a
    coding-related question and answer website, to see whether your
    issue has already been asked and solved by others. If it hasn't and
    you are considering submitting a question, make sure to read the
    posting guides beforehand to ensure that you are asking the question
    in a helpful way.

*Final words:* It is important to always work towards writing "better"
and "neater" code, as this can make it easier to break down pieces of
code and troubleshoot problems. Ways to integrate this into your
practice are to review documents like the tidyverse style guides
regularly and perhaps join an online coding community.
:::

## Summary

-   Use a consistent [style guide](https://style.tidyverse.org/) for
    code and files.
-   With tidy data, each variable has its own column, each observation
    has its own row, and each value has its own cell.
-   Never edit raw data. Instead, use R code to make changes and clean
    up the raw data, rather than manually editing the dataset.
::::::
