# Introduction to course {#sec-introduction}

> [**Introduction slides**](../slides/introduction.html)

<div>

```{=html}
<iframe class="slide-deck" src="../slides/introduction.html"></iframe>
```

</div>

::: {.callout-note collapse="true"}
## Instructor note

The slides contain speaking notes that you can view by pressing 'S' on
the keyboard.
:::

## The Big Picture

You've read the syllabus and already know an overall idea of why we are
teaching this course. But we'd like to take another chance to emphasize
the big picture context of this course and its material.

We are in a special time in research. We are facing several large scale
technological and societal changes:

-   We researchers are experiencing higher demands from funding
    agencies, universities, and peers for transparency and rigor in our
    research.
-   Our work is getting more and more complex, which requires higher
    degrees of (potentially highly distributed and virtual) team-based
    science.
-   There is a higher public attention on research, with mass
    participation and attention through the Internet and social media.
-   Our access to powerful computing resources and massive datasets is
    leading to an increasing rise in more complex analytics and data
    processing, such as through machine learning and AI.
-   Increasingly your research output is someone else's research input,
    such as with meta-research[^introduction-1] or meta-analysis.

[^introduction-1]: Evidence-based evaluation and development of research
    methods.

In this course, our ultimate aim is to start creating data analysis
projects that are: self-contained (within a single folder); have a
record of changes made to the files; make it easier for others to
collaborate; make it simpler to connect the project with a scientific
output like a paper; and, to structure analyses to be more reproducible
(or at least more easily *inspectable*).

## Common questions

::: callout-note
## Reading task: \~5 minutes

Over the number of times we've taught this course (and the others), we
get asked a lot of questions. Well, sometimes questions, sometimes
comments, and sometimes complaints. We value feedback because it
improves on the material! We have a [Frequently Asked
Questions](https://guides.rostools.org/faq) page for keeping track of
these questions. But there are a few with a common theme that deserve to
be mentioned sooner than later.

If you want to get help virtually or after the course, you can join the
[Discord channel](https://discord.gg/XaRSJFdNnp) where we run virtual
coding club sessions as well as where you can ask for help for issues
you might have.

### Why R?

<!-- TODO: Move to FAQ? -->

We often get asked: So why are we using R and why learn it? There are
many many reasons, some of which are listed below:

-   It is open source and free. Which means that you can take the
    knowledge and skills you gain for using R anywhere you go in your
    career.
-   There is very large, fairly friendly online community.
    -   So many learning resources, support, and help!
-   There is a **massive** selection of packages. Need to do something?
    There's probably already a package to do it for you.
    -   Latest statistical methods.
    -   Productivity tools.
    -   Report writing.
    -   Visualization.
    -   Many many more.
-   Recent push to improve teaching, usability, for example with the
    tidyverse and RStudio.
-   R has one of the best data visualization tools available with
    ggplot2.
-   So many more powerful capabilities when it comes to:
    -   Big Data
    -   Programming
    -   Reproducibility

## Why are we learning things other than R?

At least a few times we've gotten feedback in our survey about the fact
that we didn't spend enough time learning R or they expected more R.
That's because there is more to doing data analysis than *just* R.

We need to teach about being open, about being reproducible, and about
using better research practices in our work. All of which involves more
than just R.

| Session | Reason |
|----|----|
| Management of R projects | Reproducibility starts at the file level. |
| Version control | Openness and reproducibility is about transparency and inspection. |
| Data management and wrangling | This one is about R :smiley_cat: |
| Creating reproducible documents | Hopefully obvious :stuck_out_tongue_closed_eyes: |
| Data visualization | Also about R! |

: Some reasons why we teach what we do in each of the sessions.
:::

## Small reminder

We always get feedback that for some it is too fast and for others it is
too slow. Ideally, everyone would say it was the perfect speed. But that
won't likely happen. So instead, we aim as much as possible to have
fewer people say it was too fast than there are people saying it was too
slow. This is an introduction course, so we're trying to assume as
little to no knowledge on many of these concepts. So, for those with
some knowledge, it *will* feel slow at times! You can always help your
neighbour out!

## Encountering problems and finding help

::: {.callout-note collapse="true"}
## Instructor note

Briefly go over this section with them, especially emphasize "Restart
R", reading the error or warning message, and checking for missing
commas, brackets or misspelled words.
:::

::: callout-note
## Reading task: \~10 minutes

![A common and frequent experience when working in R. Artwork by
[\@allison_horst](https://github.com/allisonhorst/stats-illustrations).](../images/art-debugging.jpg){#fig-art-debugging
width="90%"}

You *will* encounter problems and errors when working with R, and you
will encounter them *all the time*. In fact, a large amount of your time
in R will be spent figuring out solutions to these errors ("debugging").
For this course, we have a short
[cheatsheet](../includes/cheatsheet.pdf) that lists the tools and
functions we will cover, which can help with problems forgetting
function names or their usage. RStudio also has many cheatsheets of its
own, which you can find with the Command Palette
({{< var keybind.palette >}}, then type "cheatsheet"). However, even
with these cheatsheets, you will still encounter other problems like
errors or warnings. Error messages will appear in red text in your
Console and will start with the word "Error:". Warning messages are also
in red text, but are often either harmless or informative, so make sure
to read the message and see if it says "Error" or not. Here are some
initial steps to take when you encounter an error:

1.  **First, try to stay calm**; problems happen to everyone, no matter
    their skill level. You *can fix it*! :smile:
2.  **Read through the error message and try to understand what R is
    telling you**. Some common error messages include:
    -   *"Could not find function"*: Usually means that you have
        misspelled the function or an R package has not loaded properly.
    -   *"Object not found"*: Usually means that you have not
        initialized (created) the object or the object is initialized
        but empty.
    -   *"Error in..."*: Usually means that you are referring to an
        object that doesn't exist.
    -   *"Unexpected symbol in..."*: Usually means that you misspelled a
        variable or object name, so R can't find it.
3.  **Go over the code again and carefully check for any mistakes:**
    -   Missing commas or pipes?
    -   Missing end brackets like `]`, `)`, or `}`?
    -   Capitalized something that shouldn't be capitalized?
    -   Object or column name misspelled?
    -   Forgot to load your data before working on it?
    -   Forgot to load or re-load your packages? Packages are
        automatically unloaded when you exit RStudio and R. So you need
        to load them each new session with the `library()` function.
4.  **Go back to the start of the code and run each line one at a
    time**, to see where the problem occurs. You will get an opportunity
    to practice this later, once you are working with bigger chunks of
    code.

If you still can't find the problem, here are some other steps to take:

1.  **Restart the R session with** {{< var keybind.restart-r >}} **or
    with the menu item `Session -> Restart R`**. Then load your packages
    (and data if needed) and run the code from the beginning, tracking
    which objects get created, and if the proper object name is used
    later on.

2.  (Rarely need to do) **Close/re-open RStudio and try again.**

3.  **Use `help()` or `?` to access built-in documentation about a
    function or package.** You may be using the function incorrectly, so
    find out more about the function by looking at the built-in
    documentation. The documentation will open up in the "Help" pane of
    RStudio (bottom right-hand corner). **Try it out:** Enter either of
    the following commands into the Console and run it (hit `Enter`).

    ```{r}
#| filename: "Console"
#| eval: false
?colnames

help(colnames)
    ```

    Sometimes, this documentation can be hard to read and seem overly
    complex for a beginner. You can also try finding the website for the
    package you are having trouble with, as they often have guides that
    are a little easier to understand. The
    [tidyverse](https://www.tidyverse.org/packages/) packages all have
    amazing documentation that you can use to help you with problems you
    may have.

4.  **Consider explaining the problem out loud to a colleague or
    friend.** (or even a rubber duck!) You might find that, in verbally
    going through the problem and explaining it, you will likely come up
    with the solution yourself.

5.  **Take a break and come back to it later!**

6.  **Google it.** Chances are that someone has already encountered that
    error and has asked about it online. In fact, those who are
    "experts" in coding languages like R are experts largely because of
    their skill in knowing the right words or terms or questions to ask
    Google. Usually googling the error message will be enough to find
    the answer, but sometimes you'll need to include "R" or "rstats" and
    the relevant package or function as a keyword in your search.

7.  If all else fails, you can always turn to the trusty **online R
    community**. Check
    [StackOverflow](https://stackoverflow.com/questions/tagged/r), a
    coding-related question and answer website, to see whether your
    issue has already been asked and solved by others. If it hasn't and
    you are considering submitting a question, make sure to read the
    posting guides beforehand to ensure that you are asking the question
    in a helpful way.

*Final words:* It is important to always work towards writing "better"
and "neater" code, as this can make it easier to break down pieces of
code and troubleshoot problems. Ways to integrate this into your
practice are to review documents like the tidyverse style guides
regularly and perhaps join an online coding community.
:::

## Quality of life settings

Before ending, we're going to set some RStudio options that will help
you out *a lot*. Go to `Tools -> Global Options...` and do these tasks:

1.  In "General", under the "Basic" tab, uncheck all boxes under "R
    Session", "Workspaces", and "History", as well as changing the "Save
    workspace to .RData on exit" to "Never".
2.  In "Code", under the "Editing" tab, change the "Tab width" to 2. The
    tidyverse style guide as well as `{styler}` both use 2 spaces for
    tabs, and since we are using the package, we can set this option
    here to save us editing issues.
3.  In "Code", under the "Saving" tab, check all the boxes under
    "General" and "Auto-save". This last one, the "Auto-save", will help
    out a lot, since one of the biggest "troubleshooting issues" we
    encounter when helping during the version control session is that
    people forget to save. This solves that problem.
