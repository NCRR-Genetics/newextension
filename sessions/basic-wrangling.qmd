# Data management and wrangling {#sec-wrangling}

```{r setup}
#| include: false
library(tidyverse)
```

<!-- TODO: Add an introduction here -->

**Session objectives**:

<!-- TODO: Revise objectives to fit how I did it in advanced -->

2.  Perform simple transformations and subsetting of datasets, such as:
    -   Subset specific columns and rows of a dataset, with
        `filter()`and `select()`.
    -   Sort rows of a dataset by a specific column, with `arrange()`.
    -   Create new or transform existing columns in a dataset, with
        `mutate()`.
    -   Calculate simple data summaries, with `summarise()`.
3.  Write "tidier" and more readable code by using the pipe (`%>%`)
    operator.

In data wrangling, most tasks can be expressed by a few simple "verbs"
(actions). Wrangling here refers to maneuvering, managing, controlling,
and turning your data around to clean it up, better understand it, and
prepare it for later analyses. The table below lists some common "verbs"
from the `{dplyr}` package that come from the `{tidyverse}`:

| Task | Example | Function |
|:---|:---|:---|
| Select columns | Remove data entry columns such as the person's name who entered the data. | `select()` |
| Rename columns | Changing a column name from 'Q1' to 'participant_name'. | `rename()` |
| Transform or modify columns | Multiplying or taking the log of a column's values. | `mutate()` |
| Subset/filter rows | Keeping rows with glucose values above 4. | `filter()` |
| Sort rows | Show rows with the smallest value at the top. | `arrange()` |
| Calculate summaries | Calculating the maximum, median, and minimum age. | `summarise()` |
| Run code by a group | Calculate means of age by males and females. | `group_by()` with `summarise()` |

: List of common data wrangling tasks, along with an example and the
function used for the wrangling.

**Tip**: Sometimes you need to do some complicated wrangling to get your
data "in shape" for later analyses. To save some time, you could save
the wrangled data as an "output" dataset in the `data/` folder. That
way, you can easily use it again later rather than having to run the
wrangling code every time you want to work with the data. :::

## Load the packages and dataset

We're going to use the US
[NHANES](https://www.cdc.gov/nchs/nhanes/index.htm) dataset to
demonstrate some wrangling functions. There is a R package called
`{NHANES}` that contains a teaching version of the original dataset, so
we'll use that for this course.

First, make sure that you have the `LearningR` R Project open. Second,
open the `R/learning.R` script and write code to load the `{NHANES}`
package. It should look like this now:

```{r add-packages-to-script}
#| filename: "R/learning.R"
library(tidyverse)
library(NHANES)
```

There are many ways of loading in data into R. This method loads data
that is included in a package, in this case `{NHANES}`. We will cover
how to load a dataset from a file at the end of this session.

Then, below the `library()`, let's take a `glimpse()` at the NHANES
dataset. Run this function by hitting {{< var keybind.run-code >}} while
the cursor is on the code to send it from the script to the R Console.

```{r glimpse-nhanes}
#| filename: "R/learning.R"
# Briefly glimpse contents of dataset
glimpse(NHANES)
```

This gives us a quick overview of what variables are in the dataset and
the data types that they are.

## Selecting specific columns in a dataset

Selecting columns of a dataset is a very common data wrangling task. The
function for this task in RStudio is appropriately called `select()`.
You would use `select()` to extract one or more variables in a dataset
that you want to have a closer look at or to save as a new data frame to
work with. It may be that you wish to explore the clinical
characteristics of your study sample, so you may select some basic
demographic variables (e.g., the `Age` column) and clinical variables
(e.g., `Weight` and `Height` columns) to perform these analyses.

For the input arguments, `select()` takes the dataset as the first
argument, which is the first input position right after the opening
bracket `(`, and then takes the names of the columns you want to select.
The argument after the data argument is `...`, which indicates that you
can add as many columns as you want, separated by a `,`.

```{r using-select}
#| filename: "R/learning.R"
# Select one column by its name, without quotes
select(NHANES, Age)

# Select two or more columns by name, without quotes
select(NHANES, Age, Weight, BMI)

# To *exclude* a column, use minus (-)
select(NHANES, -HeadCirc)
```

If some of your columns have similar patterns for naming at the
beginning, middle, or end of the name, you can use some helper functions
to choose these columns. Some commonly used helpers are:

-   `starts_with()`: Select columns that begin with a pattern.
-   `ends_with()`: Select columns that end with a pattern.
-   `contains()`: Select columns that contain a pattern.

```{r using-tidyselect-helpers}
#| filename: "R/learning.R"
# All columns starting with letters "BP" (blood pressure)
select(NHANES, starts_with("BP"))

# All columns ending in letters "Day"
select(NHANES, ends_with("Day"))

# All columns containing letters "Age"
select(NHANES, contains("Age"))
```

For more information on using the pattern functions such as
`starts_with()`, check out `?select_helpers` (choose the "Select
helpers" option in the menu that pops up).

You'll notice that running these functions doesn't actually change the
data itself. When you run a function without assigning it using `<-`,
the only action the function does is to send the output to your screen,
and you won't have saved that data anywhere for later use. But if you
want to create a new dataset with only the columns you selected, you'll
need to assign the selected dataset to a new object.

The full NHANES dataset is 10,000 individuals (rows) with 76 parameters
(columns). To make it easier to look at and since we are only interested
in some of these parameters, we will subset the large dataset into
something smaller and save it for later use as a new dataset.

```{r create-smaller-nhanes}
#| filename: "R/learning.R"
# Save the selected columns as a new data frame
# Recall the style guide for naming objects
nhanes_small <- select(NHANES, Age, Gender, BMI, Diabetes,
                       PhysActive, BPSysAve, BPDiaAve, Education)

# View the new data frame
nhanes_small
```

## Renaming all column names based on the style guide

In the interests of keeping data tidy and matching the [style
guide](https://style.tidyverse.org/), we should change the column names
to be all lower case with `_` for spaces between words. There's a
package that can do that for us called `{snakecase}`.

To change all the column names to snakecase, we'll use the function
`rename_with()`. This function takes the data as the first argument but
the second argument needs to be a function, which in our case is called
`snakecase::to_snake_case()`, but exclude the `()` at the end. This
function will rename all columns.

```{r create-nhanes-snakecase}
#| filename: "R/learning.R"
# Rename all columns to snake case
nhanes_small <- rename_with(nhanes_small, snakecase::to_snake_case)

# Have a look at the data frame
nhanes_small
```

## Renaming specific columns

Depending on how your data was collected, it may have column names that
aren't very descriptive. So you'll probably want to rename them to
something more explanatory, which is particularly important if you're
sharing your work with others or in an environment where multiple people
are working on the same data. We will use the function called
`rename()`. Like `select()`, `rename()` takes the dataset as the first
argument and then takes as many renaming arguments as you want (because
the second argument position is `...`). When renaming, it takes the form
of `newname = oldname`.

The "gender" variable in the dataset actually describes "sex", so let's
rename it to accurately reflect the data itself. Note that gender is a
*social construct*, while sex is *biological*. This unfortunately is
often incorrectly named in many scientific papers, where accuracy of
terms is critical. Because we want to rename the variable in the dataset
so it stays renamed, we need to assign it again to `nhanes_small`.

```{r rename-to-gender}
#| filename: "R/learning.R"
nhanes_small <- rename(nhanes_small, sex = gender)
nhanes_small
```

::: {.callout-tip appearance="default"}
We've re-assigned the object `nhanes_small` multiple times. If you make
a mistake, the easiest solution is to re-run the code from the start
again, which should fix any issues.
:::

Now, you can see that the column has been renamed from `gender` to
`sex`. What if you wanted to select some columns and then rename some of
them? Would you have to create a new data object every time? No! We can
make use of a very powerful tool called piping with the `%>%` function.

## Chaining functions with the pipe

::: callout-note
## Reading task: \~5 minutes

A key component of tidy data and tidy code is making use of the "pipe"
operator, `%>%`. There is also the base R pipe `|>`, which works
basically the same but with some small differences. For this course we
will use `%>%`, though you can use either.

You would use the "pipe" operator when you are writing a piece of code
with multiple operations or intermediate steps that require you to save
and overwrite each step as an object (see below). One advantage of the
"pipe" operator is that it will help to ensure that your code is less
cluttered with redundant and temporary object names.

This operator allows you to "pipe" the output from one function to the
input of another function, just like a plumbing pipe would do for water.
This allows you to easily chain functions together into "sentences".
Let's use an example based on English words for some action. This is the
English sentence:

> We need some eggs. Drive to the grocery store and buy some eggs before
> arriving home from work.

There are basically two actions here ("drive" and "buy") with four
inputs ("work", "grocery store", "eggs", "home"), that are all based on
the previous action. Since an action in R is a function, the functions
would be `drive()` and `buy()`. In regular R (without the "pipe"
operator), we would have to nest functions (reading from the inside to
the outside) together to chain them:

``` r
drive(buy(drive(at_work, "grocery store"), "eggs"), "home")
```

This is difficult to read. Another way to chain functions would be to
create temporary objects for each step:

``` r
at_grocery_store <- drive(at_work, "grocery store")
got_eggs <- buy(at_grocery_store, "eggs")
at_home <- drive(got_eggs, "home")
```

This still isn't very "readable", as we are having to re-name each
intermediate object with reference to the object before it. The pipe
`%>%` operator can really simplify this:

``` r
at_work %>% 
    drive("grocery store") %>% 
    buy("eggs") %>% 
    drive("home")
```

Do you find this more readable and understandable? It reads how it would
be done, in order of the steps taken.

The idea of piping is to read the functions from left to right. This can
help clarify and break down complex data processing workflows, and is
the basis for the tidyverse and many other packages.

The operator `%>%` takes the output from the object or function from the
left of the operator and puts it into the function on the right of the
operator. All input goes into the first position argument of the
function. Within the tidyverse packages, all functions take a data frame
(or vector) as the first argument in order to work with the pipe.
:::

Let's try this out on NHANES. The keyboard shortcut for the pipe is
{{< var keybind.pipe >}} (i.e., M for the `{magrittr}` package that
created the pipe).

```{r show-pipe-with-colnames}
#| filename: "R/learning.R"
# These two ways are the same
colnames(nhanes_small)

nhanes_small %>% 
    colnames()
```

The pipe automatically takes `nhanes_small` and puts it into the first
position, so we don't need to specify `nhanes_small` inside `colnames()`
when piping.

Let's try using the pipe with the `select()` and `rename()` functions
from the previous section. Remember, both `select()` and `rename()` take
a dataset as the first argument, which makes them pipe-able.

```{r piping-select-to-rename}
#| filename: "R/learning.R"
nhanes_small %>% 
    select(phys_active) %>% 
    rename(physically_active = phys_active)
```

We can now "read" these actions as:

> Take the nhanes_small dataset *and then* select the "phys_active"
> column *and then* rename the "phys_active" column to
> "physically_active".

## Exercise: Practice what we've learned

> Time: 10 minutes.

In the `R/learning.R` script file, complete the following tasks, running
each code after completing the task. *Notice that you aren't actually
changing the data each time, since you won't assign (`<-`) to a new
object.*

1.  Copy and paste the code below into the script file. Replace the
    `___` in the `select()` function, with the columns `bp_sys_ave`, and
    `education`.

    ```{r}
    #| filename: "R/learning.R"
    #| eval: false
    nhanes_small %>% 
        select(___)
    ```

2.  Copy and paste the code below and fill out the blanks. Rename the
    `bp_` variables so they don't end in `_ave`, so they look like
    `bp_sys` and `bp_dia`. *Tip*: Recall that renaming is in the form
    `new = old`.

    ```{r}
    #| filename: "R/learning.R"
    #| eval: false
    nhanes_small %>% 
        rename(___ = ___,
               ___ = ___)
    ```

3.  Re-write this piece of code using the "pipe" operator:

    ```{r}
    #| filename: "R/learning.R"
    #| eval: false
    select(nhanes_small, bmi, contains("age"))
    ```

4.  Read through (in your head) the code below. How intuitive is it to
    read? Now, re-write this code so that you don't need to create the
    temporary `blood_pressure` object by using the pipe, then re-read
    the revised version. Which do you feel is easier to "read"?

    ```{r}
    #| filename: "R/learning.R"
    #| eval: false
    blood_pressure <- select(nhanes_small, starts_with("bp_"))
    rename(blood_pressure, bp_systolic = bp_sys_ave)
    ```

5.  Run `{styler}` on the `R/learning.R` file with
    {{< var keybind.styler >}}.

6.  Lastly, add and commit these changes to the Git history with the
    RStudio Git interface using {{< var keybind.git >}}.

```{r solution-practice-dplyr}
#| eval: false
#| code-fold: true
#| code-summary: "**Click for the solution**. Only click if you are struggling or are out of time."
# 1. Select specific columns
nhanes_small %>%
    select(bp_sys_ave, education)

# 2. Rename columns
nhanes_small %>%
    rename(bp_sys = bp_sys_ave,
           bp_dia = bp_dia_ave)

# 3. Re-write with pipe
nhanes_small %>% 
    select(bmi, contains("age"))

# 4. Re-write with pipe
nhanes_small %>% 
    select(starts_with("bp_")) %>% 
    rename(bp_systolic = bp_sys_ave)
```

## Filtering data by row

Filtering data by row is a very common activity in data analysis,
especially if you want to get rid of outliers or to subset by a
categorical group. The function to subset or filter is called
`filter()`. `filter()` is distinct from `select()` in the sense that it
operates on rows, whereas `select()` operates on columns.

The `filter()` function takes a logic condition (`TRUE` or `FALSE`). As
with the other functions, the first argument is the dataset and all
others are the logical conditions that will apply to the row filtering.
When the logical conditions equal `TRUE`, it means that those rows will
be **kept** and those that are `FALSE` will be *dropped*.

*Warning*: Since `filter()` uses logical conditions, you need to be
really careful when writing the logic. As you probably know, humans are
really *really* bad at logic. If your logical condition starts getting
complex, double and triple check that you know for certain that your
logic code is doing what you think it is doing. It's very easy to make
mistakes at this stage, even for advanced R users.

The simplest kind of logic condition is to test for "equality". In R,
"equal to" is represented by `==`. For example, if we wanted to keep
only people who are not physically active in the dataset, we would use
the logic condition like this (we use `select()` after to show the
change):

```{r}
#| filename: "R/learning.R"
#| eval: false
nhanes_small %>%
    filter(phys_active == "No") %>%
    select(phys_active)
```

We would "read" this code as:

> Take the nhanes_small dataset *and then* filter so that only rows
> where `phys_active` is equal to "No" are kept (showing just the
> `phys_active` column).

When a row in the `phys_active` column has the value `"No"`, that row is
kept. Otherwise, it is dropped.

There are other logic comparisons to use. @tbl-logic-operators can be
used as a reference for logical conditions in R.

```{r logic-operators, echo=FALSE}
#| label: tbl-logic-operators
#| tbl-cap: "Logical operators in R."
tibble::tribble(
    ~Operator, ~ Description,
    "<", "less than",
    "<=", "less than or equal to",
    ">", "greater than",
    ">=", "greater than or equal to",
    "==", "equal to",
    "!=", "not equal to",
    "!x", "Not x (if x is true or false)",
    "x | y", "x OR y",
    "x & y", "x AND y"
) %>% 
    knitr::kable()
```

Let's try out a few of these logical conditions with `filter()`.

```{r}
#| filename: "R/learning.R"
# Participants who are physically active
nhanes_small %>%
    filter(phys_active != "No") %>%
    select(phys_active)

# Participants who have BMI equal to 25
nhanes_small %>%
    filter(bmi == 25) %>%
    select(bmi)

# Participants who have BMI equal to or more than 25
nhanes_small %>%
    filter(bmi >= 25) %>%
    select(bmi)
```

We use the `|` ("or") and `&` ("and") when we want to combine conditions
across columns. Be careful with these operators and when combining logic
conditions, as they can sometimes work differently than our human brains
interpret them (speaking from experience). For `&`, both sides must be
`TRUE` in order for the combination to be `TRUE`. For `|`, only one side
needs to be `TRUE` in order for the combination to be `TRUE`. To see how
they work try these:

```{r}
TRUE & TRUE
TRUE & FALSE
FALSE & FALSE
TRUE | TRUE
TRUE | FALSE
FALSE | FALSE
```

When used in `filter()`, combinations of logic conditions may look like
this:

```{r}
#| filename: "R/learning.R"
# When BMI is 25 AND phys_active is No
nhanes_small %>%
    filter(bmi == 25 & phys_active == "No") %>%
    select(bmi, phys_active)

# When BMI is 25 OR phys_active is No
nhanes_small %>%
    filter(bmi == 25 | phys_active == "No") %>%
    select(bmi, phys_active)
```

## Modify or add columns

To modify an existing column or to add a new one, we can use the
function called `mutate()`. You can use `mutate()` to compute a new
variable using existing columns in your dataset. You can multiply all
values in a certain column by 2, or combine columns into a new variable.
Like the other functions, the first input is the dataset and the other
arguments are columns to add or modify.

Take this example: In some analyses, sometimes age is reflected as
months, not years. Since NHANES has age in years, to convert to months
we would multiply by 12. So, we would use `mutate()` with the following
instruction:

```         
age = age * 12
```

This form is similar to how math works. The action that happens on the
right hand side is put into the variable of the left hand side. When
using `mutate()`, it looks like this:

```{r}
#| filename: "R/learning.R"
nhanes_small %>%
    mutate(age = age * 12)
```

Like with `filter()`, you can continue to add or modify more columns by
using `,`. So let's do that to a new column (e.g., log transforming
BMI):

```{r}
#| filename: "R/learning.R"
nhanes_small %>%
    mutate(age = age * 12,
           logged_bmi = log(bmi))
```

We can also have different values based on logic conditions using
`if_else()`. Use @tbl-logic-operators to help with creating the logic
condition.

```{r}
#| filename: "R/learning.R"
nhanes_small %>%
    mutate(old = if_else(age >= 30, "Yes", "No"))
```

::: {.callout-tip appearance="default"}
Recall that the original dataset doesn't change. If we want the added
variable to be saved, we must assign it to something with `<-`. Putting
it all together, you would enter something like this (no need to type
this out yourself):

```{r}
#| filename: "R/learning.R"
nhanes_update <- nhanes_small %>%
    mutate(old = if_else(age >= 30, "Yes", "No"))
```
:::

Before moving on, run `{styler}` with {{< var keybind.styler >}} and
commit all the files changes to the Git history with the RStudio Git
interface using {{< var keybind.git >}}.

## Exercise: Piping, filtering, and mutating

> Time: 20 minutes.

Copy and paste the code below into the `learning.R` script file.

```{r ex-pipe-filter-mutate}
#| eval: false
#| filename: "R/learning.R"
# 1. BMI between 20 and 40 with diabetes
nhanes_small %>%
    # Format should follow: variable >= number or character
    filter(___ >= ___ & ___ <= ___ & ___ == ___)

# Pipe the data into mutate function and:
nhanes_modified <- nhanes_small %>% # Specifying dataset
    mutate(
        # 2. Calculate mean arterial pressure
        ___ = ___,
        # 3. Create young_child variable using a condition
        ___ = if_else(___, "Yes", "No")
    )

nhanes_modified
```

Then, start replacing the `___` with the appropriate code to complete
the tasks below. (*Hint*: Create a new "Section" in the R script for
this exercise by using {{< var keybind.code-section >}}).

1.  Filter `nhanes_small` so only those participants with a BMI of more
    than or equal to 20 *and* less than or equal to 40, *and* keep those
    who have diabetes.

2.  Create a new variable called `mean_arterial_pressure` by applying
    the formula:

    $$((2 * DBP) + SBP) / 3$$

    (DBP = `bp_dia_ave` and SBP = `bp_sys_ave`) to calculate [Mean
    Arterial
    Pressure](https://en.wikipedia.org/wiki/Mean_arterial_pressure).
    *Hint*: In R, use `+` to add, `*` to multiply, and `/` to divide.

3.  Create a new variable called `young_child` for cases where age is
    less than 6 years.

4.  Finally, add and commit these changes to the Git history with the
    RStudio Git Interface. Push to GitHub to synchronize with your
    GitHub repository.

```{r solution-pipe-filter-mutate}
#| eval: false
#| code-fold: true
#| code-summary: "**Click for the solution**. Only click if you are struggling or are out of time."
# 1. BMI between 20 and 40, with diabetes
nhanes_small %>%
    filter(bmi >= 20 & bmi <= 40 & diabetes == "Yes")

# Pipe the data into mutate function and:
nhanes_modified <- nhanes_small %>% # dataset
    mutate(
        mean_arterial_pressure = ((2 * bp_dia_ave) + bp_sys_ave) / 3,
        young_child = if_else(age < 6, "Yes", "No")
    )

nhanes_modified
```

## Summary

-   Use the tidyverse to load in multiple packages to tidy up data.
-   Use the functions `select()`, `rename()`, `filter()`, `mutate()`
    ("change or modify"), and `summarise()` from the dplyr package to
    wrangle your data.
-   Use the pipe (`%>%`) to write easy-to-read code, similar to reading
    a text consisting of multiple sentences.

