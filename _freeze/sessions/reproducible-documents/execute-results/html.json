{
  "hash": "2237f881bf625cfde0761f6eb46700d8",
  "result": {
    "markdown": "# Analytically reproducible documents {#sec-reproducible-documents}\n\n\n\n\n\n<!-- TODO: Add an introduction here -->\n\n**Session objectives**:\n\n<!-- TODO: Revise objectives to fit how I did it in advanced -->\n\n1.  Learn what a reproducible document is, how R Markdown/Quarto helps\n    with reproducibility, and why it can save you time and effort.\n2.  Write and use R code within a document, so that it will\n    automatically insert the R output into the final document.\n3.  Learn about and use Markdown formatting and syntax for writing\n    documents.\n4.  Learn about and create different document types like HTML or Word\n    from an R Markdown/Quarto document.\n\n## Why try to be reproducible?\n\n::: callout-note\n## Reading task: \\~5 minutes\n\nBoth reproducibility and replicability are cornerstones for doing\nrigorous and sound science. As we've learned, reproducibility in science\nis lacking, which this course aims to address. However, being\nreproducible isn't just about doing better science. It can also mean\nthat:\n\n1.  You are much more efficient and productive, as less time is spent\n    between coding and transferring your results to a document. No need\n    to copy and paste!\n2.  You can be confident in your results, since what you report and show\n    as figures or tables will be exactly what you get from your\n    analysis. Again, no copying and pasting required!\n\nHopefully by the end of this session, you'll want to start using R\nMarkdown files for writing your manuscripts and other technical\ndocuments. Believe us, you can save so much time and make your work more\nreproducible once you learn how to incorporate text with R code. Plus,\nyou can create some very aesthetically appealing reports, which are way\neasier to produce than if you had done it in Word.\n\n![Have a more reproducible workflow by using R Markdown/Quarto. Artwork\nby \\@allison_horst.](../images/art-reproducibility.png){width=\"70%\"}\n:::\n\n## Exercise: Discuss your experiences or thoughts around reproducing work\n\n> Time: \\~6 minutes\n\nConsider times that you've either: tried to reproduce a labmate's or\ncollaborators work or your own; or, tried to figure out how a paper did\ntheir analysis. What were some challenges you encountered? Could you\nfigure it out? What did you end up doing? If you have not had any of\nthose experiences yet, instead brainstorm some possible challenges you\nmight face.\n\n-   Take 1 minute to think on your own.\n-   Take 3 minutes to discuss with your neighbour what your experiences\n    or what you think.\n-   In the remaining time, as a whole group we will all share some\n    thoughts on what you've talked about.\n\n## What is R Markdown and Quarto?\n\n::: callout-note\n## Reading task: \\~5 minutes\n\n[R Markdown](https://rmarkdown.rstudio.com/) is a file format (a plain\ntext format like R scripts or `.csv` files) that allows you to be more\nreproducible in your analysis and to be more productive in your work. R\nMarkdown is an extension of [Markdown](https://pandoc.org/index.html)\nthat integrates R code with written text (as Markdown formatting).\n\n[Quarto](https://quarto.org/) is a next generation version of R Markdown\nand chances are, if you've been using a fairly recent version of\nRStudio, you are already using it without realizing it. That's because\nQuarto uses the same Markdown syntax as R Markdown. The only difference\nis that with Quarto, you can create more types of output documents (like\nbooks, websites, slides), you have more options for customization, and\nit's easier to do and learn than R Markdown. Throughout this course, we\nwill use R Markdown and Quarto interchangeably, since they mostly do the\nsame thing.\n\nSo, what is Markdown? It is a [markup\nsyntax](https://en.wikipedia.org/wiki/Markup_language) and formatting\ntool, like HTML, that allows you to write a document in plain text. That\ntext can then be converted into a vast range of other document types,\ne.g. HTML, PDF, Word documents, slides, posters, or websites. In fact,\nthis website is built from Quarto! The Markdown used in R Markdown and\nQuarto is based on [pandoc](https://pandoc.org/index.html) (\"pan\" means\nall and \"doc\" means document, so \"all documents\"). Pandoc is a very\npowerful, popular, and well-maintained software tool for document\nconversion. You can use R Markdown and Quarto to do any number of\nthings. Check out Quarto's [Gallery](https://quarto.org/docs/gallery/)\nto see a list of things you can create. Just a few example document\ntypes could be:\n\n-   A website or blog.\n-   A PhD thesis.\n-   Journal articles.\n-   Books (like this course).\n\nFor now, we're going to focus on the main reason that R Markdown/Quarto\nis used: to incorporate R code and output into a single document. By\nusing R code in a document, you can have seamless integration between\ndata analysis and document-writing.\n\nWhy would you use this? There are many reasons, with some of them being:\n\n-   There is less time between exploring a new dataset or analysis and\n    sharing your findings with collaborators, because the writing and\n    documenting is woven in with your code for analysis.\n-   If you have already produced a report and later get new data or find\n    out there are problems with the existing data, updating your report\n    is as easy as clicking a button to regenerate the results.\n-   How you found and present your results is based on the exact\n    sequence of steps given in your R Markdown document, so showing\n    others how the analysis was done is easy because the *how* is\n    explicitly shown in the document.\n-   Likewise, by reading others' R Markdown documents, it is easier to\n    learn what was done in their analysis because the logic and sequence\n    is shown in the document itself.\n:::\n\n## Creating an R Markdown / Quarto file\n\nNow, we will create and save a Quarto file. Go to\n`File -> New File -> Quarto Document ...`, and a dialog box will then\nappear. Enter \"Reproducible documents\" in the title field and your name\nin the author field. HTML should be automatically selected as the output\nformat. There's also the option to use the \"visual mode\". This mode is\ngreat if you are used to working with Word and you can test it out on\nyour own later. For this course, we will focus on using the normal mode.\n\nAfter clicking \"Create\", the new file will open in RStudio. You will see\nsome text that gives a brief overview of how to use the Quarto file. For\nnow, let's ignore the text. At the top of the file you will see\nsomething that looks a bit like this:\n\n``` yaml\n---\ntitle: \"Reproducible documents\"\nauthor: \"Your Name\"\nformat: html\n---\n```\n\nThis section is called the [*YAML*](https://en.wikipedia.org/wiki/YAML)\n*header* and it contains the metadata about the document and the\nsettings for how to process it into another document. Most Markdown\ndocuments have this YAML header at the top of the document and they are\nalways surrounded by `---` on the top and bottom of the section. YAML is\na data format that has the form of a `key: value` pairing to store data.\nThe keys in this case are `title`, `author`, and `format`. The values\nare those that follow the key (e.g. \"Your Name\" for `author`). In the\ncase of Quarto, these `key` data are used to store the settings that\nQuarto will use to create the `format` output document. The keys listed\nabove are some of many settings that R Markdown has available to use.\n\nIn the case of this YAML header, the Quarto document will generate an\nHTML file because of the `format: html` setting. You can also create a\nword document by changing this to `format: docx`. You can also create\nPDF documents, though this requires installing LaTeX through the R\npackage [tinytex](https://yihui.name/tinytex/r/), which can sometimes be\ncomplicated to install. We will only cover HTML and Word documents in\nthis course. Before continuing, let's save this file as `learning.qmd`\nin the `doc/` folder.\n\nSo, how do we create a HTML (or Word) document from the this document?\nWe do that by \"rendering\" it. At the top of the pane near the \"Save\"\nbutton, there is a button with the word \"Render\" (if it's R Markdown, it\nwill be called \"Knit\" with a yarn symbol beside it). To render, you\neither click that button or use the shortcut `Ctrl-Shift-K` anywhere in\nthe R Markdown document.\n\nWhen you click the \"Render\" button, a bunch of processing messages\nshould appear in a new pane beside the Console, followed by a new window\npopping up with the newly created document. Alternatively, the HTML\ndocument may pop up in the \"Viewer\" pane.\n\nYou've now created a HTML document! Let's try making a Word document.\nChange the YAML value in the key `format:` from `html` to `docx`. Then\nrender the document again with the \"Render\" button or `Ctrl-Shift-K` for \"Knit\"\n(or using the Command Palette with `Ctrl-Shift-P`, then type \"render\"). A Word document\nshould open up. This is the basic approach to creating documents from R\nMarkdown or Quarto. Before continuing, let's add and commit the newly\ncreated file into the Git history (`Ctrl-Shift-P`, then type \"commit\").\n\n## Inserting R code into your document\n\nBeing able to insert R code directly into a document is one of the most\npowerful features of R Markdown. This frees you from having to switch\nbetween programs when simultaneously writing text and running R code to\nderive output that you'd then put into your manuscript.\n\nRunning and including R code in R Markdown is done using \"R code\nchunks\". You insert these chunks into the document by placing the cursor\nat the location where you want the chunk to be, then using the shortcut\n`Ctrl-Shift-I` for \"Insert\" or the menu item `Code -> Insert Chunk` to insert a\nnew code chunk. Like with everything else, you can also use the Command\nPalette with `Ctrl-Shift-P`, then type \"chunk\"). Before we do that, let's delete all the\ntext in your document, with exception of the YAML header (including the\ndashes surrounding it). Make sure that the YAML key `format:` is set to\n`html`.\n\nThen, place your cursor two lines below the YAML header and insert a\ncode chunk (`Ctrl-Shift-I` for \"Insert\" or `Ctrl-Shift-P`, then type \"chunk\"). The code chunk\nshould look something like this:\n\n    ```{{r}}\n     \n    ```\n\nIn the code chunk, type out `2 + 2`, so it looks like:\n\n    ```{{r}}\n    2 + 2\n    ```\n\nYou can run R code inside the code chunk the same way as you would write\nit in an R script. Typing `Ctrl-Enter` on the line will send the code\n`2 + 2` to the console, with the output appearing directly below the\ncode chunk in the document. Note that this output is *temporary*.\n\nTo ensure that the output is inserted into the HTML document, render\n(`Ctrl-Shift-K` or `Ctrl-Shift-P`, then type \"render\") the document and see what happens\nin the resulting HTML document. The output `4` should appear below the\ncode chunk in the HTML document, something like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.sourceCode}\n#> [1] 4\n```\n:::\n:::\n\n\nThis is a very simple example of how code chunks work. Things are\nusually more complicated than this though. Normally, we have to load R\npackages to use for our subsequent code, and this is no different in an\nR Markdown document. We will set this up together now.\n\nCreate a new code chunk (`Ctrl-Shift-I` for \"Insert\" or `Ctrl-Shift-P`, then type \"chunk\") and\nthen type `setup` right after the `r`. It should look like:\n\n    ```{{r setup}}\n\n    ```\n\nThis area that you just typed 'setup' in is for code chunk labels. In\nthis case, we labelled the code chunk with the name `setup`. Code [chunk\nlabels](https://yihui.name/knitr/options/#chunk-options) should be named\nwithout `_`, spaces, or `.` and instead should be one word or be\nseparated by `-`. An error may not necessarily occur if you don't follow\nthis rule, but there can be unintended side effects that you may not\nrealize and R will likely not tell you about it, probably causing you\nquite a bit of annoyance and frustration. **Note**, you can't use\nduplicate code chunk labels in your document.\n\nA nifty thing about using chunk labels is that you can get an overview\nof your code chunks using the \"Document Outline\" (found using\n`Ctrl-Shift-O`), but only if you have this option set up in:\n`Tools -> Global Options -> R Markdown -> Show in document outline`.\nThese settings can also be found with the Command Palette\n(`Ctrl-Shift-P`) followed by typing \"document outline\".\n\nThe name `setup` also has a special meaning for R Markdown. When you run\nother code chunks in the document, R Markdown will know to first look\nfor and run the code in the `setup` chunk. Therefore, this is a good\nplace to put your `library()` calls or other setup functions. Let's\nenter some code to load the packages and the dataset we have been using\nto the setup chunk:\n\n    ```{{r setup}}\n    library(tidyverse)\n    library(NHANES)\n    nhanes_small <- read_csv(here::here(\"data/nhanes_small.csv\"))\n    ```\n\n\n::: {.cell}\n\n:::\n\n\nLet's insert another code chunk below this one (`Ctrl-Shift-I` for \"Insert\" or\n`Ctrl-Shift-P`, then type \"chunk\"), and simply put `nhanes_small` in the chunk:\n\n    ```{{r}}\n    nhanes_small\n    ```\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```{.sourceCode}\n#> # A tibble: 10,000 × 8\n#>      age sex      bmi diabetes phys_active bp_sys_…¹ bp_di…² educa…³\n#>    <dbl> <chr>  <dbl> <chr>    <chr>           <dbl>   <dbl> <chr>  \n#>  1    34 male    32.2 No       No                113      85 High S…\n#>  2    34 male    32.2 No       No                113      85 High S…\n#>  3    34 male    32.2 No       No                113      85 High S…\n#>  4     4 male    15.3 No       <NA>               NA      NA <NA>   \n#>  5    49 female  30.6 No       No                112      75 Some C…\n#>  6     9 male    16.8 No       <NA>               86      47 <NA>   \n#>  7     8 male    20.6 No       <NA>              107      37 <NA>   \n#>  8    45 female  27.2 No       Yes               118      64 Colleg…\n#>  9    45 female  27.2 No       Yes               118      64 Colleg…\n#> 10    45 female  27.2 No       Yes               118      64 Colleg…\n#> # … with 9,990 more rows, and abbreviated variable names\n#> #   ¹​bp_sys_ave, ²​bp_dia_ave, ³​education\n```\n:::\n:::\n\n\nLet's run this code as we normally would in a script file, by placing\nthe cursor over the code and using the shortcut `Ctrl-Enter`. We can\nalso render (`Ctrl-Shift-K` for \"Knit\" or `Ctrl-Shift-P`, then type \"render\") the document and\nsee what it looks like. When the HTML document opens, you should see\nsome text below the `setup` chunk that might look something like this:\n\n    ── Attaching packages ──────────────────────── tidyverse 1.3.2 ──\n    ✔ ggplot2 3.4.0      ✔ purrr   1.0.0 \n    ✔ tibble  3.1.8      ✔ dplyr   1.0.10\n    ✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n    ✔ readr   2.1.3      ✔ forcats 0.5.2 \n    ── Conflicts ─────────────────────────── tidyverse_conflicts() ──\n    ✖ dplyr::filter() masks stats::filter()\n    ✖ dplyr::lag()    masks stats::lag()\n\nYou probably don't want this text in your generated document, so we will\nadd a [chunk\noption](https://quarto.org/docs/reference/cells/cells-knitr.html) to\nremove this message. Chunk options are used to change how code chunks\nwork. You can change them either by clicking on the gear/cog symbol in\nthe top right corner of the chunk (looks a bit like in\n@fig-rstudio-code-chunk-gear) or by typing them inside the code chunk at\nthe top. When adding them inside the code chunk, they always need to\nstart with `#|`.\n\n![Changing the settings for the code chunk\nactions.](../images/rstudio-code-chunk-gear.png){#fig-rstudio-code-chunk-gear\nwidth=\"60%\"}\n\nIf you want to run the code but not show those messages and warnings,\nyou can add the options `#| message: false` and `#| warning: false`:\n\n    ```{{r setup}}\n    #| message: false\n    #| warning: false\n    library(tidyverse)\n    library(NHANES)\n    nhanes_small <- read_csv(here::here(\"data/nhanes_small.csv\"))\n    ```\n\nIf you want to hide the code, messages, warnings, and output, but still\nrun the code, you can use the option `#| include: false`.\n\n    ```{{r setup}}\n    #| include: false\n    library(tidyverse)\n    library(NHANES)\n    nhanes_small <- read_csv(here::here(\"data/nhanes_small.csv\"))\n    ```\n\nOther common options are:\n\n-   `echo`: To show the code. Default value is `true`. Use `false` to\n    hide.\n-   `results`: To show the output. Default is `markup`. Use `hide` to\n    hide or `asis` as regular text (not inside a code block).\n-   `eval`: To evaluate (run) the R code in the chunk. Default value is\n    `true`, while `false` does not run the code.\n\nThese options all work on the individual code chunk. If you want to set\nan option to all the code chunks (e.g. to hide all the code but keep the\noutput), you can use Quarto's\n[`execute`](https://quarto.org/docs/reference/formats/html.html#execution)\noptions. These options are added to the YAML header and will apply the\nsettings to everything in the document. We *won't* do this in this\nsession, but here is what it looks like:\n\n``` yaml\n---\ntitle: \"Reproducible documents\"\nauthor: \"Your Name\"\nformat: html\nexecute:\n  echo: false\n  warning: false\n  message: false\n---\n```\n\n## Creating tables of results\n\nLet's try running some R code to get Quarto to create a table. First,\ncreate a new header `## Table of results` and a new code chunk with the\nlabel `mean-age-bmi-table`. Second, copy the code we worked on from the\nData Wrangling session, in @sec-group-by-summarise, which is shown below\nfor you to copy from. Instead of using `phys_active`, let's change that\nto `education`.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r mean-age-bmi-table}}\nnhanes_small %>%\n  filter(!is.na(diabetes)) %>%\n  group_by(diabetes, education) %>%\n  summarise(\n    mean_age = mean(age, na.rm = TRUE),\n    mean_bmi = mean(bmi, na.rm = TRUE)\n  ) %>%\n  ungroup()\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n```{.sourceCode}\n#> # A tibble: 12 × 4\n#>    diabetes education      mean_age mean_bmi\n#>    <chr>    <chr>             <dbl>    <dbl>\n#>  1 No       8th Grade          51.8     28.8\n#>  2 No       9 - 11th Grade     46.3     28.6\n#>  3 No       College Grad       46.0     27.3\n#>  4 No       High School        46.1     28.9\n#>  5 No       Some College       43.8     28.7\n#>  6 No       <NA>               10.1     20.5\n#>  7 Yes      8th Grade          63       32.0\n#>  8 Yes      9 - 11th Grade     61.4     33.1\n#>  9 Yes      College Grad       60.6     31.3\n#> 10 Yes      High School        59.6     33.8\n#> 11 Yes      Some College       58.9     33.0\n#> 12 Yes      <NA>               16.7     26.1\n```\n:::\n:::\n\n\nPutting the cursor somewhere in the code, use the shortcut `Ctrl-Enter`\nto run the code and see what it looks like. This output is almost in a\ntable format. We have the columns that would be the table headers and\nrows that would be meaningful table rows. Ideally, we would want this to\nbe report-ready. The first thing we should remove are the `NA` education\nrows, just like we did with `diabetes`. Then, we'll convert it into a\nmore elegant table in the R Markdown HTML output document, we use the\n`kable()` function from the knitr package. Because we don't want to load\nall of the knitr functions, we'll use `knitr::kable()` instead:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnhanes_small %>%\n  filter(!is.na(diabetes), !is.na(education)) %>%\n  group_by(diabetes, education) %>%\n  summarise(\n    mean_age = mean(age, na.rm = TRUE),\n    mean_bmi = mean(bmi, na.rm = TRUE)\n  ) %>%\n  ungroup() %>%\n  knitr::kable(caption = \"Mean values of Age and BMI for each education and diabetes status.\")\n```\n\n::: {.cell-output-display}\nTable: Mean values of Age and BMI for each education and diabetes status.\n\n|diabetes |education      | mean_age| mean_bmi|\n|:--------|:--------------|--------:|--------:|\n|No       |8th Grade      |     51.8|     28.8|\n|No       |9 - 11th Grade |     46.3|     28.6|\n|No       |College Grad   |     46.0|     27.3|\n|No       |High School    |     46.1|     28.9|\n|No       |Some College   |     43.8|     28.7|\n|Yes      |8th Grade      |     63.0|     32.0|\n|Yes      |9 - 11th Grade |     61.4|     33.1|\n|Yes      |College Grad   |     60.6|     31.3|\n|Yes      |High School    |     59.6|     33.8|\n|Yes      |Some College   |     58.9|     33.0|\n:::\n:::\n\n\nNow, render (`Ctrl-Shift-K` for \"Knit\" or `Ctrl-Shift-P`, then type \"render\") and view the output\nin the HTML document. Pretty eh! Before continuing, let's run `{styler}`\n(`Ctrl-Shift-P`, then type \"style file\") and then add and commit these changes into the\nGit history (`Ctrl-Shift-P`, then type \"commit\").\n\n## Exercise: Creating a table using R code\n\n> Time: \\~20 minutes.\n\n1.  In the `doc/learning.qmd` file, create a new header called\n    `## Prettier table` along with a code chunk and label it\n    `prettier-table`. Copy the code below (that we wrote above) and\n    paste the code into the new chunk. Add the option `#| echo: false`\n    to the code chunk.\n2.  Use `mutate()` to perform the following wrangling tasks:\n    a.  Apply the `round()` function to `mean_age` and `mean_bmi`\n        columns, to round the values to 1 digit (`digits` is the second\n        argument of `round()`).\n    b.  Use `str_to_sentence(education)` to capitalize the first letter\n        of the words in the `education` column.\n3.  Rename `diabetes` to `\"Diabetes Status\"`, `education` to\n    `Education`, and `mean_age` and `mean_bmi` to `\"Mean Age\"` and\n    `\"Mean BMI\"`, using `rename()` function. *Hint*: You can rename\n    columns to include spaces by using `\"` around the new column name\n    (e.g. `\"Diabetes Status\" = diabetes`). Don't forget, the renaming\n    form is `new = old`.\n4.  Run the code chunk to make sure the code works, including the\n    `knitr::kable()` function at the end of the pipe, with a table\n    caption of your choice. If you want you can keep the same caption as\n    is provided in the starting point below.\n5.  Run `{styler}` on the document (`Ctrl-Shift-P`, then type \"style file\").\n6.  Render the document to HTML (`Ctrl-Shift-K` for \"Knit\" or `Ctrl-Shift-P`, then type \"render\")\n    and see what the table looks like.\n7.  End the exercise by adding, committing, and pushing the files to\n    your GitHub repository (`Ctrl-Shift-P`, then type \"commit\").\n\nCopy and paste this code as a starting point:\n\n    ```{{r prettier-table}}\n    nhanes_small %>%\n      filter(!is.na(diabetes), !is.na(education)) %>%\n      group_by(diabetes, education) %>%\n      summarise(\n        mean_age = mean(age, na.rm = TRUE),\n        mean_bmi = mean(bmi, na.rm = TRUE)\n      ) %>%\n      ungroup() %>%\n      mutate(\n        # Task 2a.\n        ___ = ___(mean_age, ___),\n        ___ = ___(mean_bmi, ___),\n        # Task 2b.\n        ___ = ___(education)\n      ) %>% \n      rename(\n        # Task 3.\n        \"___\" = ___,\n        \"___\" = ___,\n        \"___\" = ___,\n        \"___\" = ___\n      ) %>% \n      knitr::kable(caption = \"Mean values of Age and BMI for each education and diabetes status.\")\n    ```\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"**Click for the solution**. Only click if you are struggling or are out of time.\"}\nnhanes_small %>%\n  filter(!is.na(diabetes)) %>%\n  group_by(diabetes, education) %>%\n  summarise(\n    mean_age = mean(age, na.rm = TRUE),\n    mean_bmi = mean(bmi, na.rm = TRUE)\n  ) %>%\n  ungroup() %>%\n  # 2. Round the means to 1 digit and\n  # modify the `education` column so that male and female get capitalized.\n  mutate(\n    mean_age = round(mean_age, 1),\n    mean_bmi = round(mean_bmi, 1),\n    education = str_to_sentence(education)\n  ) %>%\n  # 3. Rename `diabetes` to `\"Diabetes Status\"` and `education` to `Education`\n  rename(\n    \"Diabetes Status\" = diabetes, \n    \"Education\" = education,\n    \"Mean Age\" = mean_age, \n    \"Mean BMI\" = mean_bmi\n  ) %>%\n  knitr::kable(caption = \"Mean values of Age and BMI for each education and diabetes status.\")\n```\n:::\n\n\n## Formatting text with Markdown syntax\n\n::: callout-note\n## Reading task: \\~8 minutes\n\nFormatting text in Markdown is done using characters that are considered\n\"special\" and act like commands. These special characters indicate what\ntext is bolded, what is a header, what is a list, and so on. Almost\nevery feature you will need to write a scientific document is available\nin Markdown, although some are missing. If you can't get Markdown to do\nwhat you want, our suggestion would be to try to fit your writing around\nMarkdown, rather than force or fight with Markdown to do something it\nwasn't designed to do. You might actually find that the simpler Markdown\napproach is easier than what you wanted or were thinking of doing, and\nthat you can actually do quite a lot with Markdown's capabilities.\n\nYou can access a quick guide to formatting features of Markdown using\nthe RStudio menu: `Help -> Cheatsheets -> R Markdown Cheat Sheet`.\nQuarto also has a great guide to the [Basics of\nMarkdown](https://quarto.org/docs/authoring/markdown-basics.html).\n\n### Headers\n\nCreating headers (like chapters or sections) is done by using one or\nmore `#` at the beginning of a line. Headers should always be preceded\nand followed by an empty line:\n\n``` markdown\n# Header 1\n\nParagraph.\n\n## Header 2\n\nParagraph.\n\n### Header 3\n\nParagraph.\n```\n\n### Lists\n\nLists are created by adding either `-` or `1.` to the beginning of a\nline and an empty line must be at the start and end of the list.\n\nFor unnumbered lists, it looks like:\n\n``` markdown\n- item 1\n- item 2\n- item 3\n```\n\nwhich gives...\n\n-   item 1\n-   item 2\n-   item 3\n\nAnd numbered lists look like:\n\n``` markdown\n1. item 1\n2. item 2\n3. item 3\n```\n\nwhich gives...\n\n1.  item 1\n2.  item 2\n3.  item 3\n\n### Text formatting\n\n-   `**bold**` gives **bold**.\n-   `*italics*` gives *italics*.\n-   `super^script^` gives super^script^.\n-   `sub~script~` gives sub~script~.\n\n### Inline R code\n\nR Markdown also allows you to include output in-text. For instance, if\nyou wanted to add the mean of some values to the text, it would look\nlike this:\n\n> The mean of BMI is\n> `` `r round(mean(nhanes_small$bmi, na.rm = TRUE), 2)` ``.\n\nwhich gives...\n\n> The mean of BMI is 26.66.\n\nBut note that using inline R code can *only* insert a *single* number or\ncharacter value, and nothing more.\n:::\n\n::: {.callout-tip appearance=\"default\"}\n> This section is not necessary to read, but instead is here as a\n> reference. You can continue to the exercise below.\n\nThere is a lot more Markdown syntax that let's you do quite a bit for\nformatting. Quarto's [Markdown\nBasics](https://quarto.org/docs/authoring/markdown-basics.html) page is\na good reference for learning more. We only will cover and demonstrate\nthe syntax above in the course, however, below are some additional\nthings you can do with Markdown.\n\n### Block quotes\n\nBlock quotes are used when you want to emphasize a block of text,\nusually for quoting someone. You create a block quote by putting a `>`\nat the beginning of the line, and as with the lists and headers, it\nneeds empty lines before and after the text. So it looks like this:\n\n    > Block quote \n\nwhich gives...\n\n> Block quote\n\n### Adding footnotes\n\nFootnotes are added by enclosing a number or word in square brackets\n(`[]`) and beginning with an uptick (`^`). It looks like this:\n\n    Footnote[^1] or this[^note].\n\n    [^1]: Footnote content\n    [^note]: Another footnote\n\nwhich gives...\n\nFootnote[^reproducible-documents-1] or this[^reproducible-documents-2].\n\nNow, if you scroll down to the bottom of the page, you will see these\nfootnotes.\n\n### Adding links to websites\n\nIncluding a link to a website in your document is done by surrounding\nthe link text with square brackets (`[]`) followed by the link URL in\nbrackets (`()`). There must **not** be any space between the square\nbrackets and the regular brackets (it should look like `[]()`).\n\n    [Link](https://google.com)\n\nwhich gives...\n\n[Link](https://google.com)\n\n### Inserting (simple) tables\n\nWhile you can insert tables using Markdown too, it isn't recommended to\ndo that for complicated or large tables. Tables are created by\nseparating columns with `|`, with the table header being separated by a\nline that looks like `|:--|`. A simple example is:\n\n    |   | Fun | Serious |\n    |:--|----:|--------:|\n    | **Happy** | 1234 | 5678 |\n    | **Sad** | 123 | 456 |\n\nwhich gives...\n\n|           | Fun  | Serious |\n|:----------|:----:|:-------:|\n| **Happy** | 1234 |  5678   |\n| **Sad**   | 123  |   456   |\n\nThe `|---:|` or `|:---|` tell the table to left-align or right-align the\nvalues in the column. Center-align is `|:----:|`.\n\nSo you can probably imagine, doing this for larger or even slightly more\ncomplicated tables is not practical. A good alternative approach is to\ncreate the table in a spreadsheet, importing that table into R within a\ncode chunk, and using `knitr::kable()` to create the table after that.\n:::\n\n[^reproducible-documents-1]: Footnote content\n\n[^reproducible-documents-2]: Another footnote\n\n## Exercise: Practice using Markdown for writing text\n\n> Time: \\~5 minutes.\n\nGet some practice writing Markdown by completing these tasks in the\n`doc/learning.qmd` file.\n\n-   Right under the YAML header, insert a list (either numbered or\n    unnumbered) with your name and affiliation(s)/institution(s).\n-   Create three level 1 headers (`#`), called \"Intro\", \"Methods and\n    Results\", and \"Discussion\".\n-   Create a level 2 header (`##`) under \"Methods and Results\" called\n    \"Analysis\".\n-   Write one random short sentence under each header. Bold (`**word**`)\n    one word in each and italicize (`*word*`) another.\n-   Insert a code chunk to make a simple calculation (e.g. `2 + 2`).\n-   Finally, add and commit these changes into the Git history\n    (`Ctrl-Shift-P`, then type \"commit\").\n\n## Inserting figures as files or from R code\n\n::: callout-note\n## Reading task: \\~5 minutes\n\nAside from tables, figures are the most common form of output inserted\ninto documents. Like tables, you can insert figures into the document\neither with Markdown or R code chunks. We'll do it with Markdown in this\nsession and with R code in the next session. First, we need an image to\nuse. Open a browser and search for a picture to use (we're using a\nkitten, because they're cute). Download the image, create a folder in\n`doc/` called `images`, and save the image in that folder. Then, in your\nR Markdown document, use the Markdown syntax for images:\n`![Caption text](path/to/image.png)`. The image can be in png, jpeg, or\npdf formats. If you download an image and intend to use it in an\nofficial document, you will need to add text on the source and author of\nthe image for copyright purposes.\n\n``` markdown\n![Image by Dimitri Houtteman from Pixabay.](images/kitten.jpg)\n```\n\nGives...\n\n![Image by\n<a href=\"https://pixabay.com/users/Dimhou-5987327/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2536662\">Dimitri\nHoutteman</a> from\n<a href=\"https://pixabay.com/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2536662\">Pixabay</a>](../images/kitten.jpg)\n\nYou can include a link to a picture instead of downloading the image,\nthough this may only work in HTML documents and only if you have\ninternet access. Quarto has amazing image capabilities, which they show\nin the [Figures](https://quarto.org/docs/authoring/figures.html) guide.\n:::\n\nRender the document again (`Ctrl-Shift-K`) and view the HTML document\nwith the new picture. Now, let's change the width and height of the\nimage as well as its alignment. We do this by adding a `{}` to the end\nof the Markdown image tag and put options inside there.\n\n-   `fig-align`: To align the figure, either in `\"center\"`, `\"left\"`, or\n    `\"right\"`.\n-   `width` and `height`: To set the image width and height for external\n    images (not created by R). You can use percent to set the size as\n    well, e.g. `\"75%\"`.\n-   `#fig-LABEL`: Use this to add a label so you can cross-reference it\n    by typing inline `@fig-LABEL`.\n\nNow, try to change the width and height to `\"50%\"`, and change the\ncaption to something like `\"Kittens attacking flowers!\"`, and add a\nlabel and reference:\n\n    Cute kitten in @fig-kitten-attack!\n\n    ![Kitten attacking flowers!](images/kitten.jpg){#fig-kitten-attack width=\"50%\" height=\"50%\"}\n\n![Kitten attacking flowers!](../images/kitten.jpg){#fig-kitten-attack\nwidth=\"50%\" height=\"50%\"}\n\nNow in @fig-kitten-attack, we see a kitten! Render again\n(`Ctrl-Shift-K` for \"Knit\" or `Ctrl-Shift-P`, then type \"render\") to see how the image changes.\n\n## Other R Markdown features\n\n::: callout-note\n## Reading task: \\~5 minutes\n\n### Making your report prettier\n\nFor HTML documents, customizing the appearance (e.g. fonts) is pretty\neasy, since you can add settings to the YAML header that will change the\ntheme. There is a setting that you provide under `html` called `theme`,\nwhere multiple different themes can be used that are listed in Quarto's\n[HTML Theming](https://quarto.org/docs/output-formats/html-themes.html)\npage. It would look like this, if we use a theme called `yeti`:\n\n``` yaml\n---\ntitle: \"Reproducible documents\"\nformat:\n  html:\n    theme: yeti\n---\n```\n\nNotice the indentations and use of colons. Indentation tells YAML that\nthe key is actually a sub-key of the key above. The key `theme` is a\nsub-key of `html`, which is a sub-key (an setting) of `format`. All the\nthemes can be viewed directly on the\n[Bootswatch](https://bootswatch.com/) page.\n\nModifying the theme and appearance of HTML documents is surprisingly\neasy after you learn a bit of CSS, which is a bit like YAML since it\nprovides data in a `key {subkey: value}` style pairing. We won't cover\nthat in this course though. On the other hand, modifying the appearance\nof Word documents is more difficult. That's because Word doesn't allow\nit to be easily modified programmatically like HTML can, since both are\nplain text file while Word is *not* plain text, but a propriety format\n(`.docx`). So changing the appearance of the document itself requires\nthat you manually create a Word template file first, manually\npoint-and-click to modify the appearance, and then link to that template\nfile with the `reference-doc` option in the YAML header (as a sub-key of\n`docx`). Quarto's [Word\nTemplates](https://quarto.org/docs/output-formats/ms-word-templates.html)\npage continues more details about this. We won't be covering this in the\ncourse.\n\n### Collaborating on R Markdown documents\n\nIn general, there are multiple ways of collaborating on a document, some\ntraditional approaches are:\n\n1.  One person has the primary task of writing up the report and then\n    gets feedback from other collaborators through the use of \"Track\n    Changes\" or by inserting comments in Word.\n2.  Multiple people are responsible for writing the report and probably\n    use different documents that will end up being merged later on. Or\n    they email back and forth (or use something like Dropbox or Google\n    Docs or shared folders) and work on a single document.\n\nThe first workflow is not possible in an R Markdown document since there\nisn't a feature like Word's \"Track Changes\". Instead, you'd use a\nworkflow that probably resembles how peer reviews are done; reading the\ndocument and making comments in a separate file to upload to the journal\nlater. Or you'd use a workflow that revolves around GitHub and Git, an\nefficient workflow that has been tried and tested by tens of thousands\nof teams in tens of hundreds of companies globally. The goal of this\ncourse is to slowly move researchers more into the modern era, based on\nmodern technology, tools, and workflows.\n\nThe second workflow is pretty similar while using Git and GitHub along\nwith Quarto. You might split up a document into sections that each\ncollaborator may work on, and then later on merge them together. This\nlast approach is what we will get you to do for the group project.\n:::\n\n## Exercise: Adding figures and changing the theme\n\n> Time: 20 minutes.\n\nComplete these tasks in the `doc/learning.qmd` file.\n\n-   Search online for a picture that you like and want to put into the R\n    Markdown file. Download it and save the image in `doc/`.\n-   In the R Markdown file, insert the image somewhere (e.g. under\n    `# Results`) and give it an appropriate caption.\n    -   Use the Markdown syntax `![](){}` to insert the image, where the\n        file path is in between the `()`.\n    -   Include a caption in between the `[]`, center align by using\n        `fig-align=\"center\"` within the `{}`, and resize the image to\n        `\"75%\"` using `width` within the `{}`.\n-   Render the document (`Ctrl-Shift-K` for \"Knit\" or `Ctrl-Shift-P`, then type \"render\") to make\n    sure the image gets inserted.\n-   Go to Quarto's [HTML\n    Theming](https://quarto.org/docs/output-formats/html-themes.html)\n    page and look through the different themes that are available for\n    the HTML output. Find a theme you like by changing the `theme`\n    option in the YAML header and re-render the document\n    (`Ctrl-Shift-K` for \"Knit\" or `Ctrl-Shift-P`, then type \"render\").\n-   Finally, add and commit the changes you've made to the document\n    (`Ctrl-Shift-P`, then type \"commit\"). For now, don't add and commit the HTML\n    output file.\n\n## Summary\n\n-   Making your research reproducible not only improves the scientific\n    quality of your work, but also makes you more efficient, productive,\n    and have more confidence in your results.\n-   Use R Markdown to construct files that can easily be turned into a\n    variety of file types such as HTML or Word.\n-   Insert R code chucks in R Markdown and automatically include the\n    results in the final document.\n-   Make tables by using `knitr::kable()`\n-   Use headers (`# Header 1`), text formatting (`**bold**`) and lists\n    (`-`) in the R Markdown file.\n-   Insert pictures directly into the R Markdown file with\n    `![Caption text](path/to/image.png)`.\n-   For HTML, choose different themes to personalize the appearance of\n    your R Markdown output document.\n",
    "supporting": [
      "reproducible-documents_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}