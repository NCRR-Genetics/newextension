{
  "hash": "e2c7220afae77df6713aaf0ba9585760",
  "result": {
    "markdown": "# Management of R projects {#sec-rproject-management}\n\n\n\n\n\n<!-- TODO: Add an introduction here -->\n\n**Session objectives**:\n\n<!-- TODO: Revise objectives to fit how I did it in advanced -->\n\n1.  Create self-contained projects to be more reproducible.\n2.  Use built-in tools in RStudio to make it easier to manage R\n    projects.\n3.  Become familiar with the very basics of R.\n4.  Apply tools to use a consistent \"grammar\" and \"styling\" when writing\n    R code and making files.\n5.  Know of and use different approaches to getting and finding help.\n\n## What is a project and why use it?\n\n::: {.callout-note collapse=\"true\"}\n## Instructor note\n\nThroughout this session, because it is the first session, take it\nslowly. Talk through the basics of R, including emphasizing how to\ntroubleshoot or get help. Check for participants' understanding using\nthe stickies.\n:::\n\n::: callout-note\n## Reading task: \\~5 minutes\n\nBefore we create a project, we should first define what we mean by\n\"project\". What is a project? In this case, a project is a set of files\nthat together lead to some type of scientific \"output\" (for instance a\nmanuscript). Use data for your output? That's part of the project. Do\nany analysis on the data to give some results? Also part of the project.\nWrite a document, for instance a manuscript, based on the data and\nresults? Have figures inserted into the output document? These are also\npart of the project.\n\nMore and more *how* we make a claim in a scientific product is just as\nimportant as the output describing the claim. This includes not only the\nwritten description of the methods but also the exact steps taken, that\nis, the code used. So, using a project setup can help with keeping\nthings self-contained and easier to track and link with the scientific\noutput. Here are some things to consider when working in projects:\n\n-   Organise all R scripts and files in the same folder (also called\n    \"directory\") so it is more *self-contained* (doesn't rely on other\n    components in your computer).\n-   Use a common and consistent folder and file structure for your\n    projects.\n-   Use [version\n    control](https://happygitwithr.com/big-picture.html#why-git) to\n    track changes to your files.\n-   Make raw data \"read-only\" (don't edit it directly) and use code to\n    show what was done.\n-   Whenever possible, use code to create output (figures, tables)\n    rather than manually creating or editing them.\n-   Think of your code and project like you do your manuscript or\n    thesis: that other people will eventually look at it and review it,\n    and that it will likely also be published or archived online.\n\nThese simple steps can be huge steps toward being reproducible in your\nanalysis. And by managing your projects in a reproducible fashion,\nyou'll not only make your science better and more rigorous, it also\nmakes your life easier too!\n:::\n\n## Exercise: How do you organise your files and projects?\n\n> Time: \\~8 minutes.\n\nThis seems so basic, how files are organized on computers. We literally\nwork with files all the time on computers. But consider, how do you\norganize them? Take some time to discuss and share with your neighbour.\n\n1.  Take 1 minute to think to yourself.\n2.  Take 5 minutes to discuss and share with your neighbour.\n3.  For the remaining time, we will all share our thoughts with the\n    group.\n\n## RStudio and R Projects\n\nRStudio helps us with managing projects by making use of [R\nProjects](https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects).\nRStudio R Projects make it easy to divide your work projects into a\n\"container\", that have their own working directory (the folder where\nyour analysis occurs), workspace (where all the R activity and output is\ntemporarily saved), history, and documents.\n\n::: {.callout-warning appearance=\"default\"}\nFile synchronizing and backup services like OneDrive or Dropbox are\nsuper common. Unfortunately, they also can be a major source of\nfrustration and challenge when working with data analysis projects. This\nis mainly due to they way the synchronizing, by constantly looking at\nchanges to files and then synchronizing when a change occurs. When doing\ndata analysis, especially as you get more advanced and use reproducible\ndocuments and version control systems, changes to files can happen very\noften and very quickly. This can essentially cause these services to\n\"spasm\" and may overwrite the changes that are happening. Whenever\npossible, always save your work *on your computer and **not** on these\nservices*.\n:::\n\nThere are many ways one could organise a project folder. We'll be\nsetting up a project folder and file structure using `{prodigenr}` We'll\nuse RStudio's \"New Project\" menu item under:\n\n```         \nFile -> New Project.. -> New directory -> Scientific Analysis Project using prodigenr\n```\n\nWe'll call the new project **`LearningR`**. Save it on your `Desktop/`.\nSee @fig-prodigenr-project-creation for the steps to do it:\n\n![Creating a new analysis project in\nRStudio.](../videos/rstudio-prodigenr-projects.gif){#fig-prodigenr-project-creation}\n\nYou can also type the below function into the Console, but we won't do\nthat in this session.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprodigenr::setup_project(\"~/Desktop/LearningR\")\n```\n:::\n\n\n::: {.callout-note appearance=\"minimal\" collapse=\"true\"}\n## Instructor note\n\nEmphasize and reinforce what this `::` is doing and why we are doing it.\n:::\n\nJust a reminder, when we use the `::` colon here, we are saying:\n\n> Hey R, from the prodigenr package use the `setup_project` function.\n\nThat way, we are directly requesting R to look in the `{prodigenr}`\npackage and use the `setup_project()` function. We do this because we\nwant to be explicit about what we want to use and since we don't need to\nload the full package.\n\nAfter we've created a New Project in RStudio, we'll have a bunch of new\nfiles and folders.\n\n<!-- TODO: confirm this is the folder structure? Missing report? -->\n\n```         \nLearningR\n├── R\n│   └── README.md\n├── data\n│   └── README.md\n├── data-raw\n│   └── README.md\n├── doc\n│   └── README.md\n├── .gitignore\n├── DESCRIPTION\n├── LearningR.Rproj\n├── README.md\n└── TODO.md\n```\n\nThis forces a specific and consistent folder structure to all your work.\nThink of this like the \"Introduction\", \"Methods\", \"Results\", and\n\"Discussion\" sections of your paper. Each project is then like a single\nmanuscript or report, that contains everything relevant to that specific\nproject. There is a lot of power in something as simple as a consistent\nstructure. Projects are used to make life easier. Once a project is\nopened within RStudio the following actions are automatically taken:\n\n-   A new R session (process) is started.\n-   The R session's working directory is set to the project directory.\n-   RStudio project options are loaded.\n\nBefore moving on, let's go over a bit about how R works, and what the \"R\nsession\" means. An R session is the way you normally interact with R,\nwhere you would write code in the Console to tell R to do something.\nNormally, when you open an R session without an R Project, the session\ndefaults to assuming you will be working in the `~/Desktop` or `~` (your\nHome folder) location. But this location isn't where you actually work.\nYou normally work in the folder that has your R scripts or data files.\nThe assumption with R Projects on the other hand, is that the R session\nworking directory should be where the R Project is, since that is where\nyou have your R scripts and data files.\n\n::: {.callout-note appearance=\"default\"}\nEach R project is designated with a `.Rproj` file. This file contains\ninformation about the file path and various metadata. As such, when\nopening an R project, you need to open it using the `.Rproj` file.\n\nA project can be opened by either double clicking on the `.Rproj` from\nyour file browser or from the file prompt within R Studio:\n\n```         \nFile -> Open Project\n```\n\nor\n\n```         \nFile -> Recent Project.. -> LearningR\n```\n:::\n\nWithin the project we created, there are several README files in each\nfolder that explain a bit about what should be placed there. Briefly:\n\n1.  Documents like manuscripts, abstracts, and exploration type\n    documents should be put in the `doc/` directory (including [R\n    Markdown](https://rmarkdown.rstudio.com/) files which we will cover\n    in @sec-reproducible-documents.\n2.  Data, raw data, and metadata should be in either the `data/`\n    directory or in `data-raw/` for the raw data. We'll explain the\n    `data-raw/` folder and create it later in the lesson.\n3.  All R files and code should be in the `R/` directory.\n4.  Name all new files to reflect their content or function. Follow the\n    tidyverse [style guide for file\n    naming](https://style.tidyverse.org/files.html). Either `_` or `-`\n    are recommended to be used instead of a space, though using `-`\n    tends to be more commonly used.\n\nSince we'll be using Git for [version\ncontrol](https://happygitwithr.com/big-picture.html#why-git) in\n@sec-version-control, which we **highly recommended** to use for any\nproject, we need to add Git to our newly created project by typing in\nthe R Console while in the newly created `LearningR` project:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprodigenr::setup_with_git()\n```\n:::\n\n\nThis will add the `.gitignore` file to the project as well as to tell\nGit to track our project. We'll cover this more later.\n\n## What's in a (file) name?\n\nIt might seem so basic, but how you name your files can have a huge\nimpact on how easy it is for others, yourself in the future, as well as\ncomputers, to work on your project.\n\nTake some time to think about file naming. Look at the list of file\nnames below. Which file names are good names and which aren't? We'll\ndiscuss afterwards why some are good names and others are not.\n\n```         \nfit models.R\nfit-models.R\nfoo.r\nstuff.r\nget_data.R\nManuscript version 10.docx\nmanuscript.docx\nnew version of analysis.R\ntrying.something.here.R\nplotting-regression.R\nutility_functions.R\ncode.R\n```\n\n::: {.callout-note appearance=\"minimal\" collapse=\"true\"}\n## Instructor note\n\nAsk them explain why these might not be the best file names. It is a\ngroup activity. Use the text below as a guide for the above question.\n\n```         \n# Bad: Has a space.\nfit models.R\n# Good: Descriptive with no space.\nfit-models.R\n# Bad: Not descriptive.\nfoo.r\nstuff.r\n# Good: Descriptive with no space.\nget_data.R\n# Bad: Has space\nManuscript version 10.docx\n# Good: Descriptive.\nmanuscript.docx\n# Bad: Not descriptive and has spaces.\nnew version of analysis.R\n# Bad: Not descriptive and has dots.\ntrying.something.here.R\n# Good: Descriptive with - or _\nplotting-regression.R\nutility_functions.R\n# Bad: Not descriptive.\ncode.R\n```\n:::\n\n## Next steps after creating the project\n\nNow that we've created a project and associated folders, let's add some\nmore options to the project. One option to set is to ensure that every R\nsession you start with is a \"blank slate\", meaning no old data are\nautomatically imported into the Environment. This is done by typing the\nfollowing code in the Console:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_blank_slate(\"project\")\n```\n:::\n\n\nNow, let's add one R script that we will use in multiple sessions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_r(\"learning\")\n```\n:::\n\n\nThe `usethis::use_r()` command creates R scripts in the `R/` folder. As\nyou may tell, the `{usethis}` package can be quite handy. For the first\nfew sessions, we will be working the R scripts and then later will move\nover to Quarto files instead. Why? Working with R, you will be doing a\nlot of coding and writing in both types of files, so we want you to get\npractice using both.\n\n![How we can stand on the shoulders of \"usethis\" to be productive.\nArtwork by\n[\\@allison_horst](https://github.com/allisonhorst/stats-illustrations).](../images/art-usethis.png){#fig-art-usethis\nwidth=\"100%\"}\n\n## RStudio layout and usage\n\nOpen up the `R/learning.R` file now, which you will use to type in code\nfor the code-along parts. You've already gotten a bit familiar with\nRStudio in the pre-course tasks, but if you want more details, RStudio\nhas a great\n[cheatsheet](https://www.rstudio.com/resources/cheatsheets/#ide) on how\nto use RStudio. The items to know right now are the \"Console\",\n\"Files\"/\"Help\", and \"Source\" tabs.\n\nCode is written in the \"Source\" tab, where it saves the code and text as\na file. You send code to the Console from the opened file by typing\n`Ctrl-Enter` (or clicking the \"Run\" button). In the \"Source\" tab (where\nR scripts and R Markdown files are shown), there is a \"Document Outline\"\nbutton (top right beside the \"Run\" button) that shows you the headers or\n\"Sections\" (more on that later). To open it you can either click the\nbutton, use the keybinding `Ctrl-Shift-O`, go through the menu to\n`Code -> Show Document Outline`, or, through the \"Command Palette\". The\nCommand Palette is a very useful tool to learn, since you can easily\naccess almost all features and options inside RStudio through it.\nBecause of this reason, we will be using it a lot throughout the course.\nOpen it up with `Ctrl-Shift-P` and then in the pop-up search bar, type\nout \"document outline\". The first item should be the one we want, so hit\n`Enter` to activate the Outline.\n\n## Basics of using R\n\nOne useful thing to do to make your R script more readable and\nunderstandable is to use \"Sections\". They're like \"headers\" in Word and\nthey split up an R script into sections, which then show up in the\n\"Document Outline\". We can insert a section using the Command Palette by\ntyping `Ctrl-Shift-P` and then typing \"code section\" followed by\n`Enter`. You can also insert the sections through the menu\n`Code -> Insert Section`.\n\n::: {.callout-note appearance=\"minimal\" collapse=\"true\"}\n## Instructor note\n\nLet them read it over, then briefly go over the content again. We don't\nneed to do most of this as a code-along, since we will be using them a\nlot over the later sessions. However, do a code-along showing how to\nassign data to objects, the difference between unassigned (not saved)\nand assigned (saved; this will be helpful in the wrangling section and\npiping without assigning), and how to send code to the Console.\n\nEmphasize that, in general, code with `()` means it is a function and\nthat it does an action. Mention that, like everything, there are some\nsituations where that isn't completely true but it mostly is.\n:::\n\n::: callout-note\n## Reading task: \\~5 minutes\n\nIn R, everything is an object and every action is a function. A function\nis an object, but an object isn't always a function. To create an\nobject, also called a variable, we use the `<-` assignment operator:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweight_kilos <- 100\nweight_kilos\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.sourceCode}\n#> [1] 100\n```\n:::\n:::\n\n\nThe new object now stores the value we assigned it. We can read it like:\n\n> \"`weight_kilos` contains the number 100\" or \"put 100 into the object\n> `weight_kilos`\"\n\nYou can name an object in R almost anything you want, but it's best to\nstick to a [style guide](https://style.tidyverse.org/). For instance, we\nwill use `snake_case` to name things.\n\nThere are also several main \"classes\" (or types) of objects in R: lists,\nvectors, matrices, and data frames. For now, the only two we will cover\nare *vectors* and *data frames*. A vector is a string of values, while a\ndata frame is multiple vectors put together as columns. Data frames are\na form of data that you'd typically see as a spreadsheet. This type of\ndata is called \"rectangular data\" since it has two dimensions: columns\nand rows.\n\nSo these are vectors, which have different types like character, number,\nor factor:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Character vector\nc(\"a\", \"b\", \"c\")\n# Logic vector\nc(TRUE, FALSE, FALSE)\n# Numeric vector\nc(1, 5, 6)\n# Factor vector\nfactor(c(\"low\", \"high\", \"medium\", \"high\"))\n```\n:::\n\n\nNotice how we use the `#` to write comments or notes. Whatever we write\nafter the \"hash\" (`#`) tells R to ignore it and not run it.\n\nThis is what a data frame looks like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(airquality)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.sourceCode}\n#> # A tibble: 6 × 6\n#>   Ozone Solar.R  Wind  Temp Month   Day\n#>   <int>   <int> <dbl> <int> <int> <int>\n#> 1    41     190   7.4    67     5     1\n#> 2    36     118   8      72     5     2\n#> 3    12     149  12.6    74     5     3\n#> 4    18     313  11.5    62     5     4\n#> 5    NA      NA  14.3    56     5     5\n#> 6    28      NA  14.9    66     5     6\n```\n:::\n:::\n\n\nThe `c()` function puts values together and `head()` prints the first 6\nrows. Both `c()` and `head()` are *functions* since they do an *action*\nand they can be recognized by the `()` at their end. Functions take an\n*input* (known as *arguments*) and give back an *output*. Each argument\nis separated by a comma `,`. Some functions can take unlimited arguments\n(like `c()`). Others, like `head()` can only take a few arguments. In\nthe case of `head()`, the first argument is reserved for the name of the\ndata frame.\n:::\n\n## Using auto-completion in RStudio\n\n::: {.callout-note appearance=\"minimal\" collapse=\"true\"}\n## Instructor note\n\nReally emphasize how use auto-completion is.\n:::\n\nTo more quickly type out objects in R, use \"tab-completion\" to finish an\nobject name for you. Normally RStudio will start auto-completing for you\nas you type code, but you can manually trigger auto-completion with\n`Tab`. As you type out an object name, hit the `Tab` key to see a list\nof objects available. RStudio will not only list the objects, but also\nshows the possible options and potential help associated with the\nobject.\n\nTry it out. In the RStudio Console, start typing:\n\n``` r\ncol\n```\n\nThen hit tab. You should see a list of functions to use. Hit tab again\nto finish with `colnames()`. This simple tool can save so much time and\ncan prevent spelling mistakes.\n\nIf we want to get more information from data frames, we can use other\nfunctions like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Column names\ncolnames(airquality)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.sourceCode}\n#> [1] \"Ozone\"   \"Solar.R\" \"Wind\"    \"Temp\"    \"Month\"   \"Day\"\n```\n:::\n\n```{.r .cell-code}\n# Structure\nstr(airquality)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.sourceCode}\n#> 'data.frame':\t153 obs. of  6 variables:\n#>  $ Ozone  : int  41 36 12 18 NA 28 23 19 8 NA ...\n#>  $ Solar.R: int  190 118 149 313 NA NA 299 99 19 194 ...\n#>  $ Wind   : num  7.4 8 12.6 11.5 14.3 14.9 8.6 13.8 20.1 8.6 ...\n#>  $ Temp   : int  67 72 74 62 56 66 65 59 61 69 ...\n#>  $ Month  : int  5 5 5 5 5 5 5 5 5 5 ...\n#>  $ Day    : int  1 2 3 4 5 6 7 8 9 10 ...\n```\n:::\n\n```{.r .cell-code}\n# Summary statistics\nsummary(airquality)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.sourceCode}\n#>      Ozone          Solar.R         Wind            Temp     \n#>  Min.   :  1.0   Min.   :  7   Min.   : 1.70   Min.   :56.0  \n#>  1st Qu.: 18.0   1st Qu.:116   1st Qu.: 7.40   1st Qu.:72.0  \n#>  Median : 31.5   Median :205   Median : 9.70   Median :79.0  \n#>  Mean   : 42.1   Mean   :186   Mean   : 9.96   Mean   :77.9  \n#>  3rd Qu.: 63.2   3rd Qu.:259   3rd Qu.:11.50   3rd Qu.:85.0  \n#>  Max.   :168.0   Max.   :334   Max.   :20.70   Max.   :97.0  \n#>  NA's   :37      NA's   :7                                   \n#>      Month           Day      \n#>  Min.   :5.00   Min.   : 1.0  \n#>  1st Qu.:6.00   1st Qu.: 8.0  \n#>  Median :7.00   Median :16.0  \n#>  Mean   :6.99   Mean   :15.8  \n#>  3rd Qu.:8.00   3rd Qu.:23.0  \n#>  Max.   :9.00   Max.   :31.0  \n#> \n```\n:::\n:::\n\n\n## R object naming practices\n\n::: callout-note\n## Reading task: \\~5 minutes\n\nIf you've ever seen some old R code, you may notice that function and\nobject names are usually short. For instance, `str()` is the function to\nsee the \"object structure\". Back then, there were no tab-completion\ntools, so typing out long names was painful. Now we have powerful\nauto-completion tools. So this also means that when you write R code,\nyou should use descriptive names instead of short ones. For instance,\nthe object `weight_kilo` could have been named something like `x`. But\nthis doesn't tell us what that is and doesn't help us write better code.\n\nThe ability to read, understand, modify, and write simple pieces of code\nis an essential skill for a modern data analysts. So! Here's some tips\nfor writing R code:\n\n-   *Be descriptive* with your names.\n-   As with natural languages like English, write as if someone will\n    read your code.\n-   Stick to a [*style guide*](https://style.tidyverse.org/).\n\nEven though R doesn't care about naming, spacing, and indenting, it\nreally matters how your code looks. Coding is just like writing. Even\nthough you may go through a brainstorming note-taking stage of writing,\nyou eventually need to write correctly so others can *read and\nunderstand* what you are trying to say. In coding, brainstorming is\nfine, but eventually you need to code in a readable way. That's why\nusing a [style guide](https://style.tidyverse.org/) is really important.\n:::\n\n## Making code more readable\n\n::: {.callout-note appearance=\"minimal\" collapse=\"true\"}\n## Instructor note\n\nGo over this section together, not as a code-along, but instead with\nthis section on the projector. Emphasize the \"naming\" vs \"styling\"\nissues topic.\n:::\n\nThe code below is in some way either *wrong* or incorrectly written.\nWhat is wrong with it? You don't need to understand what the code does,\njust comment on the readability and anything else that might come up.\n\n``` r\n# Object names\nDayOne\nT <- FALSE\nc <- 9\n\n# Spacing\nx[,1]\nx[ ,1]\nmean (x, na.rm = TRUE)\nmean( x, na.rm = TRUE )\nheight<-feet*12+inches\ndf $ z\nx <- 1 : 10\n```\n\nThese issues can actually be broken down into two categories:\n\n-   Naming issues: This issue is harder to fix and comes with experience\n    and knowledge. For instance, the `T <- FALSE` is wrong because `T`\n    already exists and is a short hand for `TRUE` while `c <- 9` is\n    wrong because `c` is already the name of the function `c()`. You\n    normally don't want to name code based on something that already\n    exists in base R (\"naming conflicts\" between packages is fine\n    though, since there are ways to identify and fix that). These issues\n    can only be fixed manually.\n\n-   Styling issues: This is much easier to fix and can largely be done\n    automatically.\n\nRather than manually editing code to fit a style, we can instead do it\nautomatically. RStudio itself has a built-in automatic styling tool,\nfound in the menu item `Code -> Reformat Code` (or with `Ctrl-Shift-A`).\nLet's try this styling out together. Copy and paste the code above into\nthe `R/learning.R` file. *Don't* run this code, we'll just edit it to\nimprove the styling. After pasting it, run the \"Reformat Code\" menu\nitem.\n\nThe tidyverse [style guide](https://style.tidyverse.org/) also has a\npackage called `{styler}` that automatically fixes code to fit the style\nguide. With `{styler}` you can style multiple files at once, one file at\na time, or based on code you select and highlight. We will make a lot of\nuse of styling the file we are working on instead. We can do that\nthrough the Command Palette (`Ctrl-Shift-P`) and typing \"style file\",\nwhich should show the \"Style active file\" option. You'll try it out in\nthe next exercise.\n\nThe thing to note, is that `{styler}` isn't perfect, so you might need\nto sometimes manually run the RStudio reformatting (`Ctrl-Shift-A` or\nwith the Command Palette `Ctrl-Shift-P` then \"reformat\") to fix most\nsyntax issues. Other issues can only be fixed manually, like changing\nthe object name `T` or `c` to something else.\n\nPaste the code again and run `{styler}` on the file with the Command\nPalette (`Ctrl-Shift-P`, then type \"style file\"). Fixes it for us!\n\n## Packages, data, and file paths\n\nA major strength of R is in its ability for others to easily create\npackages that simplify doing complex tasks (e.g. running mixed effects\nmodels with the `{lme4}` package or creating figures with the\n`{ggplot2}` package) and for anyone to easily install and use that\npackage. So make use of packages!\n\nFor instance, a \"metapackage\" we will use throughout the course is\ncalled `{tidyverse}`, which we can load by writing this at the top of\nour script files:\n\n``` r\nlibrary(tidyverse)\n```\n\nManaging which packages our analysis depends on is covered in the\nintermediate and advanced courses. In this course, we will get you to\nwrite `library()` at the top of the file for each package that the\nfile's code depends on. Open up the `R/learning.R` file and add it to\nthe top of the script.\n\n## Encountering problems and finding help\n\n::: {.callout-note collapse=\"true\"}\n## Instructor note\n\nBriefly go over this section with them, especially emphasize \"Restart\nR\", reading the error or warning message, and checking for missing\ncommas, brackets or misspelled words.\n:::\n\n::: callout-note\n## Reading task: \\~10 minutes\n\n![A common and frequent experience when working in R. Artwork by\n[\\@allison_horst](https://github.com/allisonhorst/stats-illustrations).](../images/art-debugging.jpg){#fig-art-debugging\nwidth=\"90%\"}\n\nYou *will* encounter problems and errors when working with R, and you\nwill encounter them *all the time*. In fact, a large amount of your time\nin R will be spent figuring out solutions to these errors (\"debugging\").\nFor this course, we have a short\n[cheatsheet](../includes/cheatsheet.pdf) that lists the tools and\nfunctions we will cover, which can help with problems forgetting\nfunction names or their usage. RStudio also has many cheatsheets of its\nown, which you can find with the Command Palette (`Ctrl-Shift-P` then\ntype \"cheatsheet\"). However, even with these cheatsheets, you will still\nencounter other problems like errors or warnings. Error messages will\nappear in red text in your Console and will start with the word\n\"Error:\". Warning messages are also in red text, but are often either\nharmless or informative, so make sure to read the message and see if it\nsays \"Error\" or not. Here are some initial steps to take when you\nencounter an error:\n\n1.  **First, try to stay calm**; problems happen to everyone, no matter\n    their skill level. You *can fix it*! :smile:\n2.  **Read through the error message and try to understand what R is\n    telling you**. Some common error messages include:\n    -   *\"Could not find function\"*: Usually means that you have\n        misspelled the function or an R package has not loaded properly.\n    -   *\"Object not found\"*: Usually means that you have not\n        initialized (created) the object or the object is initialized\n        but empty.\n    -   *\"Error in...\"*: Usually means that you are referring to an\n        object that doesn't exist.\n    -   *\"Unexpected symbol in...\"*: Usually means that you misspelled a\n        variable or object name, so R can't find it.\n3.  **Go over the code again and carefully check for any mistakes:**\n    -   Missing commas or pipes?\n    -   Missing end brackets like `]`, `)`, or `}`?\n    -   Capitalized something that shouldn't be capitalized?\n    -   Object or column name misspelled?\n    -   Forgot to load your data before working on it?\n    -   Forgot to load or re-load your packages? Packages are\n        automatically unloaded when you exit RStudio and R. So you need\n        to load them each new session with the `library()` function.\n4.  **Go back to the start of the code and run each line one at a\n    time**, to see where the problem occurs. You will get an opportunity\n    to practice this later, once you are working with bigger chunks of\n    code.\n\nIf you still can't find the problem, here are some other steps to take:\n\n1.  **Restart the R session (`Session -> Restart R` or\n    `Ctrl-Shift-F10`)**. Then load your packages (and data if needed)\n    and run the code from the beginning, tracking which objects get\n    created, and if the proper object name is used later on.\n\n2.  (Rarely need to do) **Close/re-open RStudio and try again.**\n\n3.  **Use `help()` or `?` to access built-in documentation about a\n    function or package.** You may be using the function incorrectly, so\n    find out more about the function by looking at the built-in\n    documentation. The documentation will open up in the \"Help\" pane of\n    RStudio (bottom right-hand corner). **Try it out:** Enter either of\n    the following commands into the Console and run it (hit `Enter`).\n\n    ``` r\n    ?colnames\n\n    help(colnames)\n    ```\n\n    Sometimes, this documentation can be hard to read and seem overly\n    complex for a beginner. You can also try finding the website for the\n    package you are having trouble with, as they often have guides that\n    are a little easier to understand. The\n    [tidyverse](https://www.tidyverse.org/packages/) packages all have\n    amazing documentation that you can use to help you with problems you\n    may have.\n\n4.  **Consider explaining the problem out loud to a colleague or\n    friend.** (or even a rubber duck!) You might find that, in verbally\n    going through the problem and explaining it, you will likely come up\n    with the solution yourself.\n\n5.  **Take a break and come back to it later!**\n\n6.  **Google it.** Chances are that someone has already encountered that\n    error and has asked about it online. In fact, those who are\n    \"experts\" in coding languages like R are experts largely because of\n    their skill in knowing the right words or terms or questions to ask\n    Google. Usually googling the error message will be enough to find\n    the answer, but sometimes you'll need to include \"R\" or \"rstats\" and\n    the relevant package or function as a keyword in your search.\n\n7.  If all else fails, you can always turn to the trusty **online R\n    community**. Check\n    [StackOverflow](https://stackoverflow.com/questions/tagged/r), a\n    coding-related question and answer website, to see whether your\n    issue has already been asked and solved by others. If it hasn't and\n    you are considering submitting a question, make sure to read the\n    posting guides beforehand to ensure that you are asking the question\n    in a helpful way.\n\n*Final words:* It is important to always work towards writing \"better\"\nand \"neater\" code, as this can make it easier to break down pieces of\ncode and troubleshoot problems. Ways to integrate this into your\npractice are to review documents like the tidyverse style guides\nregularly and perhaps join an online coding community.\n:::\n\n## Quality of life settings\n\nBefore ending, we're going to set some RStudio options that will help\nyou out *a lot*. Go to `Tools -> Global Options...` and do these tasks:\n\n1.  In \"General\", under the \"Basic\" tab, uncheck all boxes under \"R\n    Session\", \"Workspaces\", and \"History\", as well as changing the \"Save\n    workspace to .RData on exit\" to \"Never\".\n2.  In \"Code\", under the \"Editing\" tab, change the \"Tab width\" to 2. The\n    tidyverse style guide as well as `{styler}` both use 2 spaces for\n    tabs, and since we are using the package, we can set this option\n    here to save us editing issues.\n3.  In \"Code\", under the \"Saving\" tab, check all the boxes under\n    \"General\" and \"Auto-save\". This last one, the \"Auto-save\", will help\n    out a lot, since one of the biggest \"troubleshooting issues\" we\n    encounter when helping during the version control session is that\n    people forget to save. This solves that problem.\n\n## Summary\n\n-   Use [R\n    Projects](https://support.posit.co/hc/en-us/articles/200526207-Using-Projects)\n    in RStudio (e.g. with `{prodigenr}`).\n-   Use a standard folder and file structure.\n-   Use a consistent [style guide](https://style.tidyverse.org/) for\n    code and files.\n-   Keep R scripts simple, focused, and short.\n-   Use tab auto-completion when writing code.\n-   Use `?` to get help on an R object.\n",
    "supporting": [
      "project-management_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}