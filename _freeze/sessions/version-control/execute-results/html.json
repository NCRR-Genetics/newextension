{
  "hash": "79eaa53f07a1537888351c8608fad9dd",
  "result": {
    "markdown": "# Version control with Git {#sec-version-control}\n\n<!-- TODO: Add an introduction here -->\n\n**Session objectives**:\n\n<!-- TODO: Revise objectives to fit how I did it in advanced -->\n\n1.  Learn about \"formal\" version control and its importance.\n2.  Learn about Git for version control and apply RStudio's integrated\n    Git tools.\n3.  Learn and apply the basic workflow of Git version control: View\n    changes to files, record and save those changes to a history, and\n    synchronize those changes to an online repository (GitHub).\n4.  Use GitHub to collaborate with others on a project.\n\n## What is version control? {#sec-what-is-version-control}\n\n::: {.callout-note collapse=\"true\"}\n## Instructor note\n\nBefore starting this session, get them to share some of the things they\ndiscussed during the social activity.\n\nThey will have already read it once before, during the pre-course tasks.\nTell them that they'll read it again to refresh their memories and\nreinforce the concepts. This is important because Git and version\ncontrol is something that is *very* difficult to conceptually understand\nand takes some time and practice.\n\nFor the reading parts, let them read it first and then walk through the\nmaterial again, to reinforce the importance of version control and doing\nit formally. So give them a heads up that you'll be repeating things,\nspecifically to reinforce the concepts.\n\nIt's important in this session to go **slowly**. Version control is a\nchallenging topic and isn't something most people have ever learned\nabout or dealt with. So take it slow and make sure everyone is on the\nsame page. Make use of stickies frequently to assess how everyone is\ndoing.\n:::\n\n::: callout-note\n## Reading task: \\~8 minutes\n\n> This session is *very* text and reading heavy compared to other\n> sessions. This is mostly because this topic requires a mental paradigm\n> shift in how you view files, and requires you to change your habits of\n> how you normally work. While you may get more short-term use out of\n> the R portion of this course, knowing and using version control\n> concepts and tools will fundamentally change how you work over the\n> long term. While the concepts are quite difficult, the tools to use\n> the concepts aren't, and using them often will make the concepts\n> easier to understand.\n\n!['Final' version of a document, using a common but manual 'version\ncontrol\nsystem'.](../images/version-control.jpg){#fig-version-control-comics}\n\n![Filenaming used in the commonly used 'version\ncontrol'.](../images/informal-version-control.jpg){#fig-filenaming-version-control-comics}\n\nDoes this way of saving files and keeping track of versions look\nfamiliar? While the above images are teasing a bit, there is truth to\nit: It is the most commonly used \"version control\".\n\nThis form of version control, while common, is fairly primitive,\ninformal, and very manual. It isn't ideal because it requires making\nmultiple copies of the same file, even if changes are made to only one\nsmall part of the file. This approach also makes it difficult to find\nspecific changes.\n\nThere are, however, formal version control systems that automatically\nmanage changes to a file or files. These formal version control systems\ntake snapshots of changes done to files, which are usually called\n\"revisions\" or \"commits\". These \"commits\" record what was changed since\nthe previous \"commit\". When you make these \"commits\", you have to create\na short message on what or why you made a change. These \"commits\" and\ntheir messages are stored as a log entry in a history. This history then\nhas all this information, for each commit, on which file or files were\nchanged, what was changed within the file(s), who changed it, and a\nshort message about the change. This is extremely useful, especially\nwhen working in teams, or for yourself 6 months in the future (because\nyou *will* forget things), since you can go back and quickly see what\nhappened and why.\n\nTo understand how incredibly powerful version control is, think about\nthese questions:\n\n-   How many files of different versions of a manuscript or thesis do\n    you have laying around after getting feedback from your supervisor\n    or co-authors?\n-   Have you ever wanted to experiment with your code or your manuscript\n    and need to make a new file so that the original is not modified?\n-   Have you ever deleted something and wish you hadn't?\n-   Have you ever forgotten what you were doing on a project, or why you\n    chose a particular strategy or analysis?\n\nAll these problems can be fixed by using formal version control! There\nare so many good reasons to use version control, especially in science:\n\n-   Transparency of work done to demonstrate or substantiate your\n    scientific claim.\n-   Claim to first discovery, since you have a time-stamped history of\n    your work.\n-   Defence against fraud, because of the transparency.\n-   Evidence of contributions and work, since who does what is tracked.\n-   Keeping track of changes to files easily, by looking at the history\n    of changes.\n-   Easy collaboration, because you can work on a single file/folder\n    rather than emailing versions around.\n-   Organized files and folders, since there is one single project\n    folder and one single version of each file, rather than multiple\n    versions of the same file.\n-   Less time finding things, because everything is organized and in one\n    place.\n\nIn this session we'll be covering a version control tool called\n[Git](https://git-scm.com/book/en/v2/Getting-Started-What-is-Git%3F).\nWhile Git on its own can be quite difficult to use, RStudio thankfully\nhas an amazing and straight-forward integration to it.\n:::\n\n## What is Git? {#sec-what-is-git}\n\n::: callout-note\n## Reading task: \\~5 minutes\n\nGit is one of several version control system tools available. It was\ndeveloped to help software programmers to develop and manage their work\non [Linux](https://en.wikipedia.org/wiki/Linux) (an operating system\nlike Mac or Windows). Sadly, it was designed by and for software\nprogrammers and not for non-programming users like us researchers. So\nwhy do we teach it? Because Git has so many great features that fit with\nhow science and data analysis is done.\n\n-   Like R, it is open source, so it's free and anyone verify how\n    trustworthy and correct the code is.\n-   It is very popular and so has a very large online community that\n    provides support, documentation, and tutorials on how to use it.\n-   The vast majority of open source projects and work, such as making R\n    packages, are done using Git and are hosted on\n    [GitHub](https://github.com/), which is a company that hosts Git\n    \"repositories\" (i.e. projects) online.\n    -   All RStudio code and `{tidyverse}` packages are on GitHub.\n-   There are many open scientific projects that use Git and are hosted\n    on GitHub, e.g. [rOpenSci](https://github.com/ropensci) organization\n    or [MRC Integrated Epidemiology Unit](https://github.com/MRCIEU).\n-   RStudio has an amazing interface and integration with Git.\n\nWhile learning Git and version control can be difficult and has a steep\nlearning curve, like learning R, it is ultimately an investment into\nyour future productivity and effectiveness as a researcher. It is *very\nmuch worth it* to learn and use it as often as you can.\n\nWhile many people may use Git to manage their R scripts, you can also\nmanage other non-code based files like Word or images in Git. Version\ncontrol is useful for any project that uses any type of files since they\ncan be saved in the Git history (though there are some limitations to\nusing Git for files that are not plain text like R scripts are). You can\nsave files either by adding and committing them (as we will learn to do\nshortly) or by uploading them to your repository on GitHub, as pictured\nbelow.\n\n![GitHub: Select \"Upload files\" from the \"Add file\" drop-down\nmenu.](../images/git-upload-file-github.png){#fig-git-upload-file-github}\n:::\n\n## Basics of Git {#sec-basics-of-git}\n\n::: {.callout-note appearance=\"minimal\" collapse=\"true\"}\n## Instructor note\n\nJust like above, they've already read this section but should read it\nagain to reinforce the concepts. Briefly go over it again, especially\nmaking sure everyone has their Git properly configured. Even though they\ndo that already during the pre-course tasks, sometimes things happen in\nthe meantime, so its good to check again.\n:::\n\n::: callout-note\n## Reading task: \\~8 minutes\n\nGit works by tracking changes to files *at the project level* (i.e. for\nevery R Project). So you won't track your entire, for instance,\n`Documents/` folder. When file changes are saved and put into the\nhistory, this history is called a \"repository\" (also called a \"repo\" for\nshort). We'll explain more about what a repository is later.\n\nFor every project, we need to set up and associate a Git repository with\nthe project folder. Before you continue, go into your `LearningR` R\nProject and do a quick check to make sure that you have Git properly set\nup. Run this function in your RStudio Console:\n\n\n::: {.cell layout-align=\"center\" filename='Console'}\n\n```{.r .cell-code}\nr3::check_git_config()\n```\n:::\n\n\nIt should run without any error and it should show your email and name.\nWhat you do with Git is more or less to:\n\n-   Set up Git in your project or folder by starting it as a\n    \"repository\".\n-   Tell Git to track a file by preparing it to be saved to the history.\n-   Save changes to files in the history with a message you recorded\n    about the change.\n\nOther things you can do with Git:\n\n-   Check what's been changed or added in your files since the last\n    save.\n-   Check the history for what was previously changed or added.\n\nWhen working with GitHub, there are extra things you can do (more on\nthis later):\n\n-   Synchronize the Git repository on your computer with the repository\n    on your GitHub, called \"push\" (upload) and \"pull\" (download).\n\nSo first off, *what exactly is the Git repository?* The Git repository\nworks at the project (the folder) level because it stores the version\nhistory in the hidden `.git/` folder. In Windows, this folder will\nprobably not be hidden, but in Mac and Linux, files and folders that\nstart with `.` are automatically hidden. The `.git/` folder itself is\nthe repository used by Git to store the file changes and history of the\nproject. So don't delete it!\n\nAnother important file for managing the repository is the `.gitignore`\nfile. This file tells Git to *not* track (or \"watch\") certain files,\nsuch as temporary files. This is *particularly* important for making\nsure you don't save personal data in the Git history. Personal data\nshould be stored in a *secure location* and should *only* be accessed in\nthe R Project by loading it from that secure location.\n\n```         \nLearningR\n├── .git/ <-- Git repository stored here\n├── R/\n├── data/\n├── data-raw/\n├── doc/\n├── .gitignore <-- Tells Git which files NOT to save\n├── LearningR.Rproj\n├── DESCRIPTION\n└── README.md\n```\n\nSetting up a Git repository can be done in several ways:\n\n-   When starting a new R Project, the \"Create a git repository\" option\n    can be selected from the \"New Projects\" setup instructions in\n    RStudio.\n-   For existing R Projects, you can type in the console\n    `usethis::use_git()`.\n:::\n\n## Exercise: How might you use Git in your work?\n\n> Time: \\~10 minutes.\n\nOne of the biggest comments people make when first learning about Git\nis: \"I see some of the benefits, but can't see how I would use it in my\nown work. How or why would I?\" So, to tackle that question right away,\ntake some time to brainstorm and discuss with your neighbour how you\nmight use Git *right now or in the near future*.\n\n1.  Take 1 minute to think to yourself.\n2.  Take 6 minutes to discuss and brainstorm with your neighbour.\n3.  In the final few minutes, we will all share with the group some\n    thoughts.\n\n## Using Git in RStudio\n\n::: {.callout-note collapse=\"true\"}\n## Instructor note\n\nSince they will be using the Git interface quite a bit, really take your\ntime walking through it and describing it. Show where things are and\nwhat things to focus on for this course.\n:::\n\nGit was initially created to be used in the terminal (i.e command-line).\nHowever, because RStudio has a very nice interface for working with Git,\nwe'll be using that interface so we don't have to switch to another\napplication. While the terminal provides full access to Git's power and\nfeatures, the vast majority of daily use can be done through RStudio's\ninterface.\n\nTo access the Git interface in RStudio, click the Git icon beside the\n\"Go to\" search bar (see @fig-rstudio-git-button) and then click the\n\"Commit...\" option (`Ctrl-Alt-M`). You can also use the Command Palette\nby using `Ctrl-Shift-P` and then typing \"commit\".\n\n![The location of the Git button in\nRStudio.](../images/rstudio-git-button.png){#fig-rstudio-git-button}\n\nThe Git interface should look something like @fig-rstudio-git-interface\nbelow. A short written description is given below the image.\n\n![The Git interface in\nRStudio.](../images/rstudio-git-interface.png){#fig-rstudio-git-interface}\n\n1.  This is the \"Changes\" and \"History\" buttons that allow you to switch\n    between views. Changes is what is currently changed in your files\n    relative to the last history item. History is the record of what was\n    done, to what file, when, and by whom.\n2.  These are the \"Push\" and \"Pull\" buttons that are used to synchronize\n    with GitHub, which we will cover later in the session.\n3.  This is the panel that lists the files that have been modified in\n    some way. You add (\"stage\") files here that you want to be put into\n    the history.\n4.  This is the Commit Message box where you write the message about the\n    changes that will be put into the history.\n5.  This is the panel that shows what text has been modified, added, or\n    removed from the file selected in panel 3. Green highlight indicates\n    that something has been added, while red indicates a removal.\n    Changes are detected at the line level (what line in the file). For\n    files that aren't plain text-based (e.g. Word), you can *not* see\n    what specifically was changed, it will only say that there is a\n    change.\n\n::: {.callout-note collapse=\"true\"}\n## Instructor note\n\nDo this part as a code-along, after having explained the above first.\n:::\n\nSo far, it should show a bunch of files that we've added and used over\nthe previous session. In the Git interface, select the `README.md` file.\nYou should see the text in the file, all in green. Green means the text\nhas been added. Red, which you will see shortly, means text was removed.\n\nNow click the \"Staged\" checkbox besides the `README.md` file to get it\nready to be saved into the history. You've now \"added\" it to the staged\narea. Note that when you have a lot of files to stage, you can stage\nthem all at once by pressing `Ctrl-A` to highlight and select all the\nfiles and then clicking the \"Staged\" checkbox (or hitting `Space`) on\none of the files. The box on the right side is where you type out your\n\"commit\" message. \"Commit\" means you save something to the history of\nchanges. You \"commit\" it to the history, like you \"commit\" something to\nyour own memory.\n\n::: callout-note\n## Reading task: \\~5 minutes\n\nBefore we move on, there are some things to know about how Git works. In\nGit, there are three \"states\" that a file can be in, listed below and\nsummarised in @fig-git-states.\n\n1.  The *Working folder* state is where all files are, whether they are\n    \"untracked\" or \"tracked\". Untracked is when Git sees the file, but\n    it has not yet entered the history. Tracked is when the file has\n    been saved in the history and Git \"watches\" it for changes.\n2.  The *Staged* state is when a file has a change that is different\n    compared to the version in the history and it has been checked\n    (\"added\") into the \"Staged\" area (by ticking the checkbox beside the\n    file in the Git interface).\n3.  The *History* or *Committed* state is when a \"commit\" message has\n    been written and the file with its changes has been saved into the\n    repository history.\n\n\n```{mermaid}\n%%| label: fig-git-states\n%%| fig-cap: The three states that files and folders can be in, when using Git.\n%%| echo: false\n%%| eval: true\n%%{init:{'themeCSS': \".actor {stroke: DarkBlue;fill: White;stroke-width:1.5px;}\", 'sequence':{'mirrorActors': false}}}%%\nsequenceDiagram\n    participant W as Working folder\n    participant S as Staged\n    participant H as History\n    W->>S: Add\n    S->>H: Commit\n```\n\n\nThis system allows us to keep a journal (a *log*) of what has been\nchanged, why it has been changed, who changed it, and when.\n@fig-rstudio-git-interface-log below shows an example log of the history\nof a previous version of this lesson, which makes it easy to get an\noverview of what is happening in a project.\n\n![An example of a history for this course's\nrepository.](../images/rstudio-git-interface-log.png){#fig-rstudio-git-interface-log}\n\nYou may notice that the messages in the log give a bit of detail about\nwhy a change was made, though it's not always the case. Sometimes a\nmessage like \"minor edit\" is enough, because it was a minor edit.\n\nA general tip for writing an effective commit message is to be *concise\nbut meaningful*. Writing down meaningful messages can save you a lot of\ntime in the future when you come back to a project after some time and\nforget what you were doing. With a well written history you can get a\nquick idea or reminder about the state of the project.\n:::\n\n::: {.callout-note collapse=\"true\"}\n## Instructor note\n\nVerbally explain the above to reinforce the concepts, than do the rest\nas a code-along.\n\nFor going over the Git history pane, demonstrate how you can open a file\nat that commit, so that nothing is ever lost.\n:::\n\nOk, now write something like \"Add initial README file\" in the commit\nmessage box and commit the change. After clicking \"Commit\", you'll\nnotice that the `README.md` file is no longer on the left side. That's\nbecause we've put the change into the history. We can view the history\nby clicking the \"History\" button in the top-left corner of the RStudio\nGit interface. Here you can see what has been done in previous commits.\n\nThe \"History\" section is quite powerful. As long as you commit something\ninto the Git history, it will never be completely\ngone[^version-control-1]. For instance, we can see the full contents of\na file at a specific commit by clicking the commit, moving to the file\nyou want to look into, and clicking the link that says\n`View file @ ...`. Try that with the first commit of the README file.\nSee how it shows what was there before you made more changes?\n\n[^version-control-1]: This isn't completely true, you can delete stuff,\n    like if you accidentally add a password or personal data.\n\n<!-- TODO: Add an image here of opening a file at a location. -->\n\nNext, open up the `README.md` file in RStudio using the Files tab. At\nthe top of the file, write your name and your field of research, and\nthen save the file. Open up the Git interface again (with the Git icon\nor with {{< var keybind.git >}}). You should now see the added text in\ngreen. Alright, now \"Stage\" the change (click the checkbox), write a\nmessage like \"added my name to README file\", and commit the change. Go\nback to the history and you should see the two commits in your\nrepository. If you don't see it in the history, you likely need to click\nthe refresh button at the top.\n\nA question that may come up is \"how often should I commit\"? In general,\nit's better to commit fairly frequently and to commit changes that are\nrelated to each other and to the commit message. Following this basic\nprinciple will make your history easier for you to read and make it\neasier for others as well.\n\n## Exercise: Committing to history\n\n> Time: 15 minutes.\n\nWhen working on your own projects and when you use Git, you will be\ncommitting a *lot* of changes to your files into the Git history. Part\nof the initial barrier is simply getting used to this workflow of\ncommitting what you've changed. Use this exercise to get some practice.\nWe will be using this workflow often throughout the rest of the course.\n\n1.  Practice the add-commit (\"add to staging\"-\"committing to history\")\n    sequence by adding and committing *each* of the remaining files in\n    your R project *one at a time* into the Git history (e.g. the\n    `.gitignore`, the `.R` files, and the `.Rproj` file). While you\n    could add and commit them all at once, we want you to do them one at\n    a time so you practice using this workflow.\n    -   Make sure to write a meaningful and short message about what you\n        added and why. In this case, the \"why\" is simply that you are\n        saving the file into the history for the first time.\n2.  Once all the files have been added and committed, add a new line to\n    the `R/learning.R` with an R comment (starts with a `#`). Type out\n    something like \"This will be used for testing out Git\". Add and\n    commit that new line you've written.\n\n## \"Remotes\": Storing your repository online {#sec-remotes-setting-up}\n\n::: {.callout-note collapse=\"true\"}\n## Instructor note\n\nBriefly go over this next section, especially highlighting the image.\n:::\n\nA version control system that didn't include a type of external backup\nwouldn't be a very good system, because if something happened to your\ncomputer, you'd lose your Git repository. In Git, this \"external\" backup\nis called a \"remote\" (meaning it is something that is separate from and\nin a different location, usually online, than the main repository). The\nremote repository is essentially a duplicate copy of the *history* (the\n`.git/` folder) of your *local* repository (on your computer), so when\nyou synchronize with the remote, as illustrated in @fig-git-remotes, it\nonly copies over the changes made as commits in the history.\n\nOne of the biggest reasons why we teach Git is because of the popularity\nof several Git repository hosting sites. The most popular one is\n[GitHub](https://github.com/) (which this course is hosted on). In this\nsession, we'll be covering GitHub not only because it is very popular,\nbut also because the R community is almost entirely on GitHub.\n\n\n```{mermaid}\n%%| label: fig-git-remotes\n%%| fig-cap: The 'remote' vs 'local' repository, or online vs on your computer.\n%%| echo: false\n%%| eval: true\ngraph TB\n    linkStyle default interpolate basis\n    A('Remote':<br>GitHub) --- B('Local':<br>Your computer)\n\n    style A fill:White,stroke:DarkBlue,stroke-width:1.5px;\n    style B fill:White,stroke:DarkBlue,stroke-width:1.5px;\n```\n\n\nLet's get familiar with GitHub. More details about manually creating\nrepositories on GitHub is found in @sec-extra-create-repo-github.\n\n::: {.callout-note collapse=\"true\"}\n## Instructor note\n\nGo over the interface of GitHub, especially where repositories are\nlisted, the sidebar of the landing page (of your account), and where\nyour account settings are.\n:::\n\n::: {.callout-warning appearance=\"default\"}\nWhen using GitHub, especially in relation to health research, you need\nto be mindful of what you save into the Git history and what you put up\nonline. Some things to think about are:\n\n-   **Do not** save any personal or sensitive data or files in your Git\n    repository.\n-   Generally don't save very large files, like big image files or large\n    datasets.\n\nIn both cases, it's better to use another tool to store files like that,\nrather than through Git and GitHub.\n:::\n\n## Using GitHub as a remote\n\n::: callout-note\n## Reading task: \\~3 minutes\n\nMaking and cloning a GitHub repository is the first step to linking a\nlocal repository to a remote one. After that, to keep your GitHub\nrepository synchronized, you need to \"push\" (upload) and \"pull\"\n(download) any changes you make to the repository on your computer, as\ndemonstrated in Figure @fig-git-remotes-synch. It isn't done\nautomatically because Git is designed with having control in mind, so\nyou must do this synchronization manually. \"Pushing\" is when changes to\nthe history are uploaded to GitHub while \"pulling\" is when the history\nis downloaded from GitHub.\n\n\n```{mermaid}\n%%| label: fig-git-remotes-synch\n%%| fig-cap: \"Synchronizing with GitHub: 'Pushing' and 'pulling'.\"\n%%| echo: false\n%%| eval: true\ngraph TB\n    linkStyle default interpolate basis\n    A('Remote':<br>GitHub) -- Pull --> B('Local':<br>Your computer)\n    B -- Push --> A\n\n    style A fill:White,stroke:DarkBlue,stroke-width:1.5px;\n    style B fill:White,stroke:DarkBlue,stroke-width:1.5px;\n```\n\n\nSo, when we put the concepts back into the framework of the \"states\",\nfirst introduced in @sec-basics-of-git, pushing and pulling *happen only\nto the history*. Things that you've changed and then saved to the\nhistory, either on the remote or the local repository, are synchronized\nfrom or to GitHub. So, as shown in @fig-git-states-with-github, pushing\ncopies the history over to GitHub and pulling copies the history from\nGitHub. Since changes saved in the history also reflect the working\nfolder (the files and folders you actually see and interact with),\n\"pulling\" also updates the files and folders.\n\n\n```{mermaid}\n%%| label: fig-git-states-with-github\n%%| fig-cap: Which states get 'pushed' and 'pulled'.\n%%| echo: false\n%%| eval: true\n%%{init:{'themeCSS': \".actor {stroke: DarkBlue;fill: White;stroke-width:1.5px;}\", 'sequence':{'mirrorActors': false}}}%%\nsequenceDiagram\n    participant W as Working folder\n    participant S as Staged\n    participant H as History\n    participant R as GitHub\n    W->>S: Add\n    S->>H: Commit\n    H->>R: Push\n    R->>H: Pull\n    R->>W: Pull\n```\n\n\nInteracting with GitHub through R requires us to use something called a\n\"personal access token\", which you will learn about and create in the\nnext exercise.\n:::\n\n## Exercise: Creating a GitHub token with usethis\n\n> Time: \\~20 minutes\n\nSince we use R, there is a really useful set of functions from\n`{usethis}` to make it easy interact with and setup connections to\nGitHub from RStudio. Complete the [Connect to\nGitHub](https://guides.rostools.org/connect-github.html) guide for this\nexercise. In the end, you should have your `LearningR` project on\nGitHub.\n\n::: {.callout-note collapse=\"true\"}\n## Instructor note\n\nOn your own, run the commands in the guides. After they complete the\ntasks, make sure that they have the \"Push\" and \"Pull\" buttons as well as\nhaving the `LearningR` on GitHub.\n:::\n\n## Synchronizing with GitHub\n\nAfter creating the token, we can now push and pull any changes you make\nto the files.\n\n1.  Make sure you are in the `LearningR` R Project, which you should see\n    in the top right corner, above the Console pane. If you aren't,\n    switch to it by clicking the button in the top right corner and\n    selecting the `LearningR` project from the menu.\n2.  Open up the `README.md` and add a random sentence somewhere near the\n    top of the file.\n3.  Save the file.\n4.  Open the Git interface, by hitting `Ctrl-Alt-M` (or\n    {{< var keybind.git >}}) anywhere in RStudio or going to the\n    `Git button -> Commit`.\n5.  Stage the file.\n6.  Add a commit message.\n7.  Commit the new change by clicking the \"Commit\" button.\n8.  Click the \"Push\" button in the top right corner of the Git interface\n    (Box 2 of @fig-rstudio-git-interface). A pop-up will indicate that\n    it's pushing and will tell you when it's done.\n\nNow let's try the opposite by committing and pulling changes from GitHub\nto your local repository.\n\n1.  Go to your `LearningR` GitHub repository. You should see the new\n    change is also on the GitHub repository.\n2.  Click the `README.md` file on the GitHub website and then click the\n    \"Edit\" button (see the video below, which shows it for random\n    repository called `learning-github`).\n3.  Add another random sentence somewhere near the top of the file.\n4.  Scroll down to the commit message box, and type out a commit\n    message.\n5.  Click the \"Commit\" button.\n6.  Go back to RStudio, open the Git interface and now click the \"Pull\"\n    button in the top right corner beside the \"Push\" button.\n7.  Wait for it to finish pulling and check your `README.md` file for\n    the new change. You've now updated your project!\n\n\n{{< video ../videos/github-edit-and-commit-file.mp4 >}}\n\n\n\n## Exercise: How can you use Git to collaborate better?\n\n> Time: \\~10 minutes.\n\nBefore actually learning about how you might collaborate with others\n(and future you) by using Git and GitHub, let's brainstorm and discuss\nhow you might do it. Based on what you have learned so far, take some\ntime to think about how you might use Git and GitHub to collaborate more\neasily between collaborators and future you.\n\n1.  Take 1 minute to think to yourself.\n2.  Take 6 minutes to brainstorm and discuss with your neighbour.\n3.  In the final few minutes, we will share what you discussed with the\n    group.\n\n## Collaborating using Git and GitHub\n\n::: {.callout-note appearance=\"minimal\" collapse=\"true\"}\n## Instructor note\n\nAfter they've read the activity, briefly go over the image and emphasize\nwhy collaborating this way makes things easier. If you have some\npersonal experiences, please share them!\n:::\n\n::: callout-note\n## Reading task: \\~10 minutes\n\nWhile all of the previous Git tools we covered are extremely useful when\nworking alone, we've been building up to using Git for it's main and\nbiggest advantage: to easily collaborate with others on a project.\n\nUsing the concept and structure of remote repositories like GitHub\ncombined with the idea of saving changes to files in a history,\ncollaborating with others on a common project is much easier and more\npowerful. Think of it like Dropbox on steroids.\n\nLet's go back to the concept of remote repositories. Since a local\nrepository is simply a copy of a remote repository, anyone else can\ncollaborate on your project by copying the remote repository. When they\nwant to contribute back, they make commits to their local copy and push\nup to the remote. Then you can pull to your local copy and do the same\nthing. This is illustrated in Figure @fig-git-remotes-collaborate.\n\n\n```{mermaid}\n%%| label: fig-git-remotes-collaborate\n%%| fig-cap: Collaborating with others using Git and GitHub by having a shared central GitHub repository.\n%%| echo: false\n%%| eval: true\ngraph TB\n    linkStyle default interpolate basis\n    A('Remote':<br>GitHub) -- Pull --> B('Local':<br>Your computer)\n    B -- Push --> A\n    A -- Pull --> C('Local':<br>Collaborator's<br>computer)\n    C -- Push --> A\n\n    style A fill:White,stroke:DarkBlue,stroke-width:1.5px;\n    style B fill:White,stroke:DarkBlue,stroke-width:1.5px;\n    style C fill:White,stroke:DarkBlue,stroke-width:1.5px;\n```\n\n\nFor public GitHub repositories, anyone can copy your repository and\ncontribute back, so working with collaborators is easy. When you have a\nprivate repository, you need to explicitly add collaborators in GitHub.\n\nYou add someone by going to\n`Settings -> Manage Access -> Invite a collaborator` (also shown in the\nvideo below).\n\n\n{{< video ../videos/github-add-collaborator.mp4 >}}\n\n\n\nWe won't have you do this for this course, since you've all been added\nas collaborators to your group's repository. Instead, you can focus on\ngetting practice collaborating on a Git project in the group work later\nin the course.\n\n> **Note**: A big challenge you'll encounter with becoming better with\n> this way of collaborating is that most of your collaborators will\n> likely not be familiar with it, at least until they take this course.\n> :wink: Sadly, even experienced people struggle with this and there is\n> no easy answer on how to handle this. The best way (in our opinion) is\n> to start training any colleague who is interested in collaborating\n> this way and slowly you'll surround yourself with collaborators who\n> also work this way.\n:::\n\n## Summary\n\n-   Use the version control system Git to track changes to your files,\n    to more easily manage your project, and to more easily collaborate\n    with others.\n-   Git tracks files in three states: \"Working directory\", \"Staged\", and\n    \"History\".\n    -   The Git repository contains the history.\n-   The main actions to move between states are:\n    -   \"Add to staging\"\n    -   \"Commit to history\"\n-   When committing to history, keep messages short and meaningful.\n    Focus more on **why** the change was made, not what.\n-   \"Remotes\" are external storage locations for your Git repository.\n    GitHub is a popular remote repository hosting service.\n    -   Downloading a Git repository from GitHub is called \"cloning\".\n-   \"Pushing\" and \"pulling\" are actions to upload and download to the\n    remote repository (which usually is called \"origin\").\n-   Almost all Git actions can be done using RStudio's Git interface.\n",
    "supporting": [
      "version-control_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}