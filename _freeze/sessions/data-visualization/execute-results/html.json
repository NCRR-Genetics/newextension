{
  "hash": "49009e4d54032b51308cccc9056ce482",
  "result": {
    "markdown": "---\nexecute: \n  warning: false\n---\n\n\n# Data visualization {#sec-visualization}\n\n\n\n\n\n<!-- TODO: Add an introduction here -->\n\n<!-- TODO: Add text about using Quarto options for figures -->\n\n**Session objectives**:\n\n1.  Learn and apply the basics of creating publication-quality graphs.\n2.  Learn the importance of considering the colours you use in your\n    graphs and apply tools that are colour-blind friendly.\n3.  Learn why to avoid using commonly used, but inappropriate, graphs\n    for presenting results.\n4.  Create useful graphs such as boxplots, scatterplots, line graphs,\n    jitter plots, and (appropriate) barplots.\n\n## Basic principles for creating graphs\n\n::: callout-note\n## Reading task: \\~4 minutes\n\nMaking graphs in R is surprisingly easy and can be done with very little\ncode. Because of the ease with which you can make them, it gives you\nsome time to consider: *why* you are making them; whether the graph\nyou've selected is the *most appropriate* for your data or results; and\nhow you can design your graphs to be as accessible and understandable as\npossible.\n\nTo start, here are some tips for making a graph:\n\n-   Whenever possible or reasonable, show raw data values rather than\n    summaries (e.g. means).\n-   Though commonly used in scientific papers, [*avoid\n    barplots*](https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.1002128)\n    with means and error bars as they greatly misrepresent the data\n    (we'll cover why later).\n-   Use colour to highlight and enhance your message, and make the plot\n    visually appealing.\n-   Use a colour-blind friendly palette to make the plot more accessible\n    to others (more on this later too).\n\nThere are also excellent online books on this that are included in the\n[resources](https://guides.rostools.org/learning.html) page of the\nGuides website.\n:::\n\n## Basic structure of using ggplot2\n\n::: callout-note\n## Reading task: \\~6 minutes\n\n`{ggplot2}` is an implementation of the [\"Grammar of\nGraphics\"](https://www.springer.com/gp/book/9780387245447) (gg). This is\na powerful approach to creating plots because it provides a set of\nstructured rules (a \"grammar\") that allow you to expressively describe\ncomponents (or \"layers\") of a graph. Since you are able to describe the\ncomponents, it is easier to then implement those \"descriptions\" in\ncreating a graph. There are at least four aspects to using ggplot2 that\nrelate to its \"grammar\":\n\n-   Aesthetics, `aes()`: How data are mapped to the plot, including what\n    data are put on the x and y axes, and/or whether to use a colour for\n    a variable.\n-   Geometries, `geom_` functions: Visual representation of the data, as\n    a layer. This tells ggplot2 how the aesthetics should be visualized,\n    including whether they should be shown as points, lines, boxes,\n    bins, or bars.\n-   Scales, `scale_` functions: Controls the visual properties of the\n    `geom_` layers. Can be used to modify the appearance of the axes, to\n    change the colour of dots from, e.g., red to blue, or to use a\n    different colour palette entirely.\n-   Themes, `theme_` functions or `theme()`: Directly controls all other\n    aspects of the plot, such as the size, font, and angle of axis text,\n    and the thickness or colour of the axis lines.\n\nThere is a massive amount of features in ggplot2. Thankfully,\n`{ggplot2}` was specifically designed to make it easy to find and use\nits functions and settings using tab auto-completion. To demonstrate\nthis feature, try typing out `geom_` and then hitting `Tab`. You will\nget a list of all the geoms available. You can use this with `scale_` or\nthe options inside `theme()`. Try typing out `theme(axis.` and then\nhitting `Tab`, and a list of theme settings related to the axis will pop\nup.\n\nSo, why do we teach `{ggplot2}` and not base R plotting? Base R plotting\nfunctionality is quite good and you can make really nice\npublication-quality graphs. However, there are several major limitations\nto base R plots from a beginner and a user-interface perspective:\n\n-   Function and argument names are inconsistent and opaque (e.g. the\n    `cex` argument can be used to magnify text and symbols, but you\n    can't immediately tell from the name that it does that).\n-   User-friendly documentation that is accessible to a broad range of\n    people is not much of a priority, so often the help documentation\n    isn't written with beginners in mind.\n-   Graphs are built similar to painting on a canvas; make a mistake and\n    you need to start all over (e.g. restart R).\n\nThese limitations are due to the fact that base R plotting was\ndeveloped:\n\n-   By different people over different periods of time.\n-   By people who were/are mostly from statistics and maths backgrounds.\n-   By people who (generally) don't have training in principles of\n    software user-design, user-interface, or engineering.\n-   Without a strong \"design philosophy\" to guide development.\n-   During a time when auto-completion didn't really exist or was\n    sub-optimal, so short function and object names were more important\n    than they are today.\n\nOn the other hand, `{ggplot2}`:\n\n-   Has excellent documentation for help and learning.\n-   Has a strong design philosophy that makes it easier to use.\n-   Works in \"layers\", so you don't have to start over if you make a\n    mistake.\n-   Works very well with auto-completion.\n-   Uses function and argument naming that is consistent and\n    *descriptive* (in plain English).\n\nThese are the reasons we teach and use `{ggplot2}`.\n:::\n\n## Graph individual variables\n\nVery often you want to get a sense of your data, one variable (i.e.\ncolumn in a data frame) at a time. You create plots to see the\ndistribution of a variable and visually inspect the data for any\nproblems. There are several ways of plotting continuous variables like\nage or BMI in `{ggplot2}`. For discrete variables like education status,\nthere is really only one way.\n\nYou may notice that, since the Data Wrangling session (@sec-wrangling),\nwe have been using the term \"column\" to describe the columns in the data\nframe, but from this point forward, we will instead refer to them as\n\"variable\". There's a reason for this: `{ggplot2}` really only works\nwith tidy data. If we recall the definition of tidy data, it consists of\n\"variables\" (columns) and \"observations\" (rows) of a data frame. To us,\na \"variable\" is something that we are interested in analyzing or\nvisualizing, and which only contains values relevant to that measurement\n(e.g. `age` variable must only contain values for age).\n\nThe `NHANES` dataset is already pretty tidy. Rows are participants at\nthe survey year and columns are the variables that were measured. Let's\nvisually explore our data. In the `LearningR` project in the\n`doc/learning.qmd` file, create a new second-level header on the bottom\nof the file called `## Visualizing data`. Now, we are ready to start\ncreating the first plot!\n\n### One continuous variable\n\nSince BMI is a strong risk factor for diabetes, let's check out the\ndistribution of BMI among the participants. There are two good geoms for\nexamining distributions for continuous variables: `geom_density()` and\n`geom_histogram()`. How you use both is the same, so we will only show\nthe histogram geom.\n\nWrite out a new header called `### One variable plots` in the free text\narea. Below it add a code chunk (`Ctrl-Alt-I` for \"Insert\" or\n`Ctrl-Shift-P`, then type \"chunk\"). To make use of auto-completion and to get used to\nusing the pipe, we'll pipe the data into the `ggplot()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create histogram for BMI\nnhanes_small %>% \n  ggplot(aes(x = bmi)) +\n  geom_histogram()\n```\n\n::: {.cell-output-display}\n![](data-visualization_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nYou'll notice we get a warning about dropping missing values. That's\n`{ggplot2}` letting us know we have some missing values. So, like with\n`median()` and many of the other summary statistic functions, we can set\n`na.rm = TRUE` to `geom_histogram()` and other `geom_*` functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create histogram for BMI\nnhanes_small %>% \n  ggplot(aes(x = bmi)) +\n  geom_histogram(na.rm = TRUE)\n```\n\n::: {.cell-output-display}\n![](data-visualization_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nNote that it is good practice to always create a new line after the `+`.\nOur plot shows that, for the most part, there is a good distribution\nwith BMI, although there are several values that are quite large,\nincluding some at 80 BMI units! Let's use `{dplyr}` functions to remove\nanything above 60. Because we are piping the results into `ggplot()`, we\ncan use `aes()` right away rather than put in the data object to the\nfirst argument position.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnhanes_small %>%\n  filter(bmi <= 60) %>%\n  ggplot(aes(x = bmi)) +\n  geom_histogram(na.rm = TRUE)\n```\n\n::: {.cell-output-display}\n![](data-visualization_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nIn general, it is good practice to create a new code chunk for each plot\nin R Markdown for several reasons. One, it makes it easier to maintain a\nnice readable code and, two, there are some chunk options that only work\nwith one figure. For instance, we can add a caption with the option\n`#| fig-cap`. Let's add one as well as a figure label with `#| label` so\nwe can reference it in the text by using `@fig-LABEL`. Figure labels\n**must** always start with `fig-`.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| fig-cap: \"Distribution of BMI.\"\n#| label: fig-bmi-histo\nnhanes_small %>%\n  filter(bmi <= 60) %>%\n  ggplot(aes(x = bmi)) +\n  geom_histogram(na.rm = TRUE)\n```\n````\n\n::: {.cell-output-display}\n![Distribution of BMI.](data-visualization_files/figure-html/fig-bmi-histo-1.png){#fig-bmi-histo width=672}\n:::\n:::\n\n\nNow when we reference the figure in the text, we can use\n`@fig-bmi-histo`, to look like this: @fig-bmi-histo.\n\n### One discrete variable\n\nThe geoms above are appropriate for plotting continuous variables, but\nwhat about plotting discrete variables? Well, sadly, there's really only\none: `geom_bar()`. This isn't a geom for a barplot though; instead, it\nshows the counts of a discrete variable. There are many discrete\nvariables in NHANES, including education and diabetes, so let's use this\ngeom to visualize those. Again, create a new code chunk\n(`Ctrl-Alt-I` for \"Insert\" or `Ctrl-Shift-P`, then type \"chunk\") and type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create count barplot for education\nnhanes_small %>%\n  ggplot(aes(x = education)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](data-visualization_files/figure-html/discrete-variables-1.png){width=672}\n:::\n:::\n\n\nWe can't use `na.rm = TRUE` here because `geom_bar()` includes that\ninformation as a bar. We can see that the number of people in\nprogressively higher education statuses steadily increases, but there's\nalso a lot of missingness shown in the `NA` column. Now, we'll do the\nsame for the diabetes status variable. In the same code chunk, type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create count barplot for diabetes status\nnhanes_small %>%\n  ggplot(aes(x = diabetes)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](data-visualization_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nFor diabetes, it seems that there is some missingness in the data. Same\nthing with education. Like we did with the BMI, we'll use `filter()` to\ndrop those missing rows right before plotting them. First create a new\ncode chunk (`Ctrl-Alt-I` for \"Insert\" or `Ctrl-Shift-P`, then type \"chunk\"). Then we'll start\nwith diabetes and then copy and paste the code, replacing `diabetes`\nwith `education`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnhanes_small %>%\n  filter(!is.na(diabetes)) %>%\n  ggplot(aes(x = diabetes)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](data-visualization_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\nnhanes_small %>%\n  filter(!is.na(education)) %>%\n  ggplot(aes(x = education)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](data-visualization_files/figure-html/unnamed-chunk-6-2.png){width=672}\n:::\n:::\n\n\nWe are plotting two figures here. With Quarto, we can arrange them side\nby side in the output document by using the `#| layout-ncol` (or\n`#| layout-nrow` or `#| layout`), described more in Quarto's\n[Figures](https://quarto.org/docs/authoring/figures.html#subcaptions)\npage. We can then combine it with captions and sub-captions using\n`#| fig-subcap` to have a nice output!\n\n\n::: {#fig-diabetes-education .cell layout-ncol=\"2\"}\n\n````{.cell-code}\n```{{r}}\n#| label: fig-diabetes-education\n#| fig-cap: \"Counts of Diabetes and Education.\"\n#| fig-subcap:\n#|   - \"Number of those with or without Diabetes.\"\n#|   - \"Number of those with different educational status.\"\n#| layout-ncol: 2\nnhanes_small %>%\n  filter(!is.na(diabetes)) %>%\n  ggplot(aes(x = diabetes)) +\n  geom_bar()\n\nnhanes_small %>%\n  filter(!is.na(education)) %>%\n  ggplot(aes(x = education)) +\n  geom_bar()\n```\n````\n\n::: {.cell-output-display}\n![Number of those with or without Diabetes.](data-visualization_files/figure-html/fig-diabetes-education-1.png){#fig-diabetes-education-1 width=672}\n:::\n\n::: {.cell-output-display}\n![Number of those with different educational status.](data-visualization_files/figure-html/fig-diabetes-education-2.png){#fig-diabetes-education-2 width=672}\n:::\n\nCounts of Diabetes and Education.\n:::\n\n\nRender the document (`Ctrl-Shift-K` for \"Knit\" or `Ctrl-Shift-P`, then type \"render\") to see what\nit looks like! Neat eh :grinning:\n\n::: {.callout-note appearance=\"minimal\" collapse=\"true\"}\n## Instructor note\n\nFor this section on the bar-with-standard-error plots, make sure to go\nover and emphasize the problems and major flaws with using this type of\nplot. Really try to reinforce the concept here.\n:::\n\nBefore continuing with plotting, let's take a minute to talk about a\ncommonly used barplots with mean and error bars. In all cases, barplots\nshould **only** be used for discrete (categorical) data where you want\nto show counts or proportions. As a general rule, they should **not** be\nused for continuous data. This is because the commonly used \"bar plot of\nmeans with error bars\" actually hides the underlying distribution of the\ndata. To have a better explanation of this, you can read the article on\nwhy to [avoid\nbarplots](https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.1002128)\nafter the course. The image below was taken from that paper, and briefly\ndemonstrates why this plot type is not useful.\n\n::: {#fig-barplots-deceive}\n![](../images/barplots-deceive.png){width=\"100%\"}\n\nBars deceive what the data actually look like. Image sourced from a\n[PLoS Biology\narticle](https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.1002128).\n:::\n\nIf you *do* want to create a barplot, you'll quickly find out that it is\nactually quite hard to do in `{ggplot2}`. The reason it is difficult to\ncreate in `{ggplot2}` is by design: it's a bad plot to use, so use\nsomething else.\n\n::: {#fig-art-bar-error-plot}\n![](../images/art-bar-error-plot.png){width=\"70%\"}\n\nBarplots hide interesting results. Artwork by\n[\\@allison_horst](https://github.com/allisonhorst/stats-illustrations).\n:::\n\nBefore we move on, let's run `{styler}` (`Ctrl-Shift-P`, then type \"style file\"), then\nadd and commit the new files we created into the Git history\n(`Ctrl-Shift-P`, then type \"commit\") and push up to your GitHub repository.\n\n## Plotting two variables\n\nThere are many more types of \"geoms\" to use when plotting two variables.\nYour choice of which one to use depends on what you are trying to show\nor communicate, and the nature of the data. Usually, the variable that\nyou \"control or influence\" (the independent variable) in an experimental\nsetting goes on the x-axis, and the variable that \"responds\" (the\ndependent variable) goes on the y-axis.\n\n### Two continuous variables\n\nWhen you have *two continuous* variables, some geoms to use are:\n\n-   `geom_hex()`, which is used to replace `geom_point()` when your data\n    are *massive* and creating points for each value takes too long to\n    plot. Because we have a lot of data, we will show this one.\n-   `geom_point()`, which is used to create a standard scatterplot.\n    You'll use this one in the exercise, it is used the same way as\n    other geoms.\n-   `geom_smooth()`, which applies a \"regression-type\" line to the data\n    (default uses LOESS regression).\n\nLet's check out how BMI may influence systolic blood pressure using a\nhex plot in a new code chunk. First, enter a new Markdown header called\n`### Plotting two variables` and create a new code chunk\n(`Ctrl-Alt-I` for \"Insert\" or `Ctrl-Shift-P`, then type \"chunk\") below it. Like with the\nprevious plot we created using `bmi`, we'll use `na.rm` again.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnhanes_small %>% \n  ggplot(aes(x = bmi, y = bp_sys_ave)) +\n  geom_hex(na.rm = TRUE)\n```\n\n::: {.cell-output-display}\n![](data-visualization_files/figure-html/2-continuous-variables-1.png){width=672}\n:::\n:::\n\n\nNotice how the hex plot changes the colour of the data based on how many\nvalues are in the area of the plot. We can also draw a smoothing line by\nadding to the plot by using `+`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Runs a smoothing line with confidence interval\nnhanes_small %>% \n  ggplot(aes(x = bmi, y = bp_sys_ave)) +\n  geom_hex(na.rm = TRUE) +\n  geom_smooth(na.rm = TRUE)\n```\n\n::: {.cell-output-display}\n![](data-visualization_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nThis makes a nice smoothing line through the data and gives us an idea\nof general trends or relationships between the two variables.\n\n### Two discrete variables\n\nSadly, there are not many options available for plotting two discrete\nvariables, without major data wrangling. The most useful geom for this\ntype of plot is `geom_bar()`, but with an added variable. We can use the\n`geom_bar()` \"fill\" option to have a certain colour for different levels\nof a variable. Let's use this to see difference in diabetes status\nbetween education levels. Create a new code chunk (`Ctrl-Alt-I` for \"Insert\" or\n`Ctrl-Shift-P`, then type \"chunk\"). We'll have to remove the `NA` values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Two categorical/discrete variables\n# Note that we can pipe data into ggplot\nnhanes_small %>%\n  filter(!is.na(education), !is.na(diabetes)) %>%\n  ggplot(aes(x = diabetes, fill = education)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](data-visualization_files/figure-html/2-discrete-variables-1.png){width=672}\n:::\n:::\n\n\nBy default, `geom_bar()` will make \"fill\" groups stacked on top of each\nother. In this case, it isn't really that useful, so let's change them\nto be sitting side by side. For that, we need to use the `position`\nargument with a function called `position_dodge()`. This new function\ntakes the \"fill\" grouping variable and \"dodges\" them (moves them) to be\nside by side.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# \"dodged\" (side-by-side) bar plot\nnhanes_small %>%\n  filter(!is.na(education), !is.na(diabetes)) %>%\n  ggplot(aes(x = diabetes, fill = education)) +\n  geom_bar(position = position_dodge())\n```\n\n::: {.cell-output-display}\n![](data-visualization_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nNow you can see that there are differences between education and those\nwho have diabetes.\n\n### Discrete and continuous variables\n\nWhen the variable types are mixed (continuous and discrete), there are\nmany more geoms available to use. A couple of good ones are:\n\n-   `geom_boxplot()`, which makes boxplots that show the median and a\n    measure of range in the data. Boxplots are generally pretty good at\n    showing the spread of data. However, like the discuss about \"bar\n    plots\", boxplots can still hide your actual data. It is generally\n    fine to use, but a better geom might be jitter or voilin.\n-   `geom_jitter()`, which makes a type of scatterplot, but for discrete\n    and continuous variables. A useful argument to `geom_jitter()` is\n    `width`, which controls how wide the jittered points span from the\n    center line. This plot is much better than the boxplot since it\n    shows the *actual data*, and not summaries like a boxplot does.\n    However, it is not very good when you have lots of data points.\n-   `geom_violin()`, which shows a density distribution like\n    `geom_density()`. This geom is great when there is a lot of data and\n    `geom_jitter()` may otherwise appear as a mass of dots.\n\nThe way you use any of these geoms is the same. If you use one, you can\nuse another. So we'll show how to use `geom_voilin()`, because our data\nare quite big.\n\nLet's take a look at these geoms, by plotting how BMI differs between\nthose with or without diabetes. Create a new code chunk\n(`Ctrl-Alt-I` for \"Insert\" or `Ctrl-Shift-P`, then type \"chunk\") and type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using mixed data\nnhanes_small %>%\n  filter(!is.na(diabetes), bmi <= 60) %>%\n  ggplot(aes(x = diabetes, y = bmi)) +\n  geom_violin(na.rm = TRUE)\n```\n\n::: {.cell-output-display}\n![](data-visualization_files/figure-html/discrete-continuous-variables-1.png){width=672}\n:::\n:::\n\n\nBefore proceeding with the following exercise, take a moment to run\n`{styler}` (`Ctrl-Shift-P`, then type \"style file\"), render (`Ctrl-Shift-K` for \"Knit\" or\n`Ctrl-Shift-P`, then type \"render\"), add and commit changes to the Git history\n(`Ctrl-Shift-P`, then type \"commit\"), and then push to Github. Also, notice the\ndocument outline now has a nice index of how to plot the different data\ntypes!\n\n## Exercise: Creating plots with one or two variables\n\n> Time: 20 minutes.\n\nCreate a new header in the `doc/learning.qmd` file called\n`## Exercise to make plots with one or two variables`. For each task\nbelow, create a new code chunk (`Ctrl-Alt-I` for \"Insert\" or `Ctrl-Shift-P`, then type \"chunk\")\nfor it. Copy and paste the template code shown in each task into its own\ncode chunk. When you complete each task, run `{styler}`\n(`Ctrl-Shift-P`, then type \"style file\") and render (`Ctrl-Shift-K` for \"Knit\" or\n`Ctrl-Shift-P`, then type \"render\") the document to make sure it works and to see the\noutput.\n\nComplete as many tasks as you can below.\n\n1.  Start with the original NHANES dataset to have access to more\n    variables.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    library(NHANES)\n    nhanes_exercise <- NHANES %>%\n      rename_with(snakecase::to_snake_case) %>%\n      rename(sex = gender)\n    ```\n    :::\n\n\n2.  With the `nhanes_exercise` data, use `geom_density()` to show the\n    distribution of `age` (participant's age at collection) and\n    `diabetes_age` (age of diabetes diagnosis) in two separate,\n    side-by-side plots, but inside one code chunk. Use `#| layout-ncol`,\n    along with `#| label`, `#| fig-cap` and `#| fig-subcap`, to have the\n    two plots be side by side. Don't forget to use `na.rm = TRUE` in the\n    geom.\n\n    ``` r\n    #| ___: ___\n    #| ___: ___\n    #| ___: ___\n    #| ___: \n    #|   - ___\n    #|   - ___\n    # Distribution of age\n    nhanes_exercise %>% \n      ggplot(aes(x = ___)) +\n        ___(___ = ___)\n\n    # Distribution of age at diabetes diagnosis\n    nhanes_exercise %>% \n      ggplot(aes(x = ___)) +\n        ___(___ = ___)\n    ```\n\n    <details>\n\n    <summary><b>Click for the solution</b>. Only click if you are\n    struggling or are out of time.</summary>\n\n\n    ::: {.cell}\n    \n    ````{.cell-code}\n    ```{{r solution-distribution-ages}}\n    #| eval: false\n    # These are approximate caption titles\n    #| label: fig-distribution-ages\n    #| fig-cap: \"Distribution of different age variables\"\n    #| layout-ncol: 2\n    #| fig-subcap:\n    #|   - \"Age at collection\"\n    #|   - \"Age of diabetes diagnosis\"\n    # Distribution of age\n    nhanes_exercise %>% \n      ggplot(aes(x = age)) +\n      geom_density(na.rm = TRUE)\n    \n    # Distribution of age at diabetes diagnosis\n    nhanes_exercise %>% \n      ggplot(aes(x = diabetes_age)) +\n      geom_density(na.rm = TRUE)\n    ```\n    ````\n    :::\n\n\n    </details>\n\n3.  With `nhanes_exercise`, use `filter()` and `geom_bar()` to find out\n    how many people there who currently smoke (`smoke_now`) and who are\n    at or above the `age` or 20. Drop missing values (`!is.na()`) from\n    `smoke_now`. What can you say about how many smoke in this age\n    group? Use `#| label` and `#| fig-cap` to be able to reference it in\n    the Quarto document and have a caption. Render (`Ctrl-Shift-K` for \"Knit\" or\n    `Ctrl-Shift-P`, then type \"render\") the document to make sure it works and to see\n    the output.\n\n    ``` r\n    # Number of people who smoke now and are or above 20 years of age,\n    # removing those with missing smoking status.\n    nhanes_exercise %>% \n      ___(___ >= ___, !is.na(___)) %>% \n      ggplot(aes(x = ___)) +\n      ___()\n    ```\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\" code-summary=\"**Click for the solution**. Only click if you are struggling or are out of time.\"}\n    # Number of people who smoke now and are or above 20 years of age,\n    # removing those with missing smoking status.\n    nhanes_exercise %>%\n      filter(age >= 20, !is.na(smoke_now)) %>%\n      ggplot(aes(x = smoke_now)) +\n      geom_bar()\n    ```\n    :::\n\n\n4.  Mean arterial pressure is a blood pressure measure used to determine\n    the average pressure arteries experience through a typical cardiac\n    cycle. The formula to calculate it is:\n\n    $$(Systolic + (2 \\times Diastolic) / 3)$$\n\n    Use `mutate()` to create a new column called\n    `mean_arterial_pressure` using this formula above. The code template\n    below will help you start out. Then, use `geom_hex()` and add\n    another layer for `geom_smooth()` to find out how `bmi` (on the\n    x-axis) relates to `mean_arterial_pressure` (on the y-axis). Do you\n    notice anything about the data from the plots?\n\n    ``` r\n    # BMI in relation to mean arterial pressure\n    nhanes_exercise %>% \n      ___(___ = (___ + (2 * ___)) / 3) %>% \n      ggplot(aes(x = ___, y = ___)) +\n      ___(na.rm = TRUE) +\n      ___()\n    ```\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\" code-summary=\"**Click for the solution**. Only click if you are struggling or are out of time.\"}\n    # BMI in relation to mean arterial pressure\n    nhanes_exercise %>%\n      mutate(mean_arterial_pressure = (bp_sys_ave + (2 * bp_dia_ave)) / 3) %>%\n      ggplot(aes(x = bmi, y = mean_arterial_pressure)) +\n      geom_hex(na.rm = TRUE) +\n      geom_smooth()\n    ```\n    :::\n\n\n5.  End with adding and committing the changes to the Git history\n    (`Ctrl-Shift-P`, then type \"commit\").\n\n## Visualizing three or more variables\n\nThere are many ways to visualize additional variables in a plot and\nfurther explore your data. For that, we can use `{ggplot2}`'s colour,\nshape, size, transparency (\"alpha\"), and fill aesthetics, as well as\n\"facets\". Faceting in `{ggplot2}` is a way of splitting the plot up into\nmultiple plots when the underlying aesthetics are the same or similar.\nIn this section, we'll be covering many of these capabilities in\n`{ggplot2}`.\n\nThe most common and \"prettiest\" way of adding a third variable is by\nusing colour. Let's try to answer a few of the questions below, to\nvisualize some of these features. First, create a new header called\n`## Plotting three or more variables` and a new code chunk\n(`Ctrl-Alt-I` for \"Insert\" or `Ctrl-Shift-P`, then type \"chunk\").\n\n*Question: Is systolic blood pressure different in those with or without\ndiabetes within different education groups?* In this case, we have one\ncontinuous variable (`bp_sys_ave`) and two discrete variables\n(`education` and `diabetes`). To plot this, we could use\n`geom_boxplot()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot systolic blood pressure in relation to education and diabetes status\nnhanes_small %>%\n  filter(!is.na(diabetes), !is.na(education)) %>%\n  ggplot(aes(x = education, y = bp_sys_ave, colour = diabetes)) +\n  geom_boxplot(na.rm = TRUE)\n```\n\n::: {.cell-output-display}\n![](data-visualization_files/figure-html/using-colour-1.png){width=672}\n:::\n:::\n\n\nDo you see differences in systolic blood pressure between the education\nstatuses? Between diabetics and non-diabetics?\n\n*Question: How does BMI relate to systolic blood pressure and age?*\nHere, we have three continuous variables (`bmi`, `bp_sys_ave`, and\n`age`), so we could use `geom_point()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot BMI in relation to systolic blood pressure and age\nnhanes_small %>%\n  ggplot(aes(x = bmi, y = bp_sys_ave, colour = age)) +\n  geom_point(na.rm = TRUE)\n```\n\n::: {.cell-output-display}\n![](data-visualization_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nCan you see any associations between systolic blood pressure and BMI or\nage?\n\n*Question: How does BMI relate to systolic blood pressure, and what is\ndifferent between those with and without diabetes?* In this case, we\nhave two continuous variables (`bmi` and `bp_sys_ave`) and one discrete\nvariable (`diabetes`). We could use `geom_point()`, making sure to also\n`filter()` those missing `diabetes` values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot BMI in relation to systolic blood pressure and diabetes status\nnhanes_small %>%\n  filter(!is.na(diabetes)) %>% \n  ggplot(aes(x = bmi, y = bp_sys_ave, colour = diabetes)) +\n  geom_point(na.rm = TRUE)\n```\n\n::: {.cell-output-display}\n![](data-visualization_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nFor this latter plot, it's really hard to see what's different. But\nthere is another way of visualizing a third (or fourth, and fifth)\nvariable: with \"faceting\"! Faceting splits the plot up into multiple\nsubplots using the function `facet_grid()`. For faceting to work, at\nleast one of the first two arguments to `facet_grid()` is needed. The\nfirst two arguments are:\n\n-   `cols`: The discrete variable to use to facet the plot column-wise\n    (i.e. side-by-side).\n-   `rows`: The discrete variable to use to facet the plot row-wise\n    (i.e. stacked on top of each other).\n\nFor both `cols` and `rows`, the nominated variable must be wrapped by\n`vars()` (e.g. `vars(diabetes)`). Let's try it using an example from the\nprevious answer (instead of using `colour`). Make a new code chunk\n(`Ctrl-Alt-I` for \"Insert\" or `Ctrl-Shift-P`, then type \"chunk\") at the bottom of the file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot BMI in relation to systolic blood pressure and diabetes status using\n# faceting by column\nnhanes_small %>%\n  filter(!is.na(diabetes)) %>% \n  ggplot(aes(x = bmi, y = bp_sys_ave)) +\n  geom_point(na.rm = TRUE) +\n  facet_grid(cols = vars(diabetes))\n```\n\n::: {.cell-output-display}\n![](data-visualization_files/figure-html/using-faceting-1.png){width=672}\n:::\n:::\n\n\nTry faceting with plots stacked by diabetes status, using the argument\n`rows = vars(diabetes)` instead. Which do you find more informative?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# faceting by row\nnhanes_small %>%\n  filter(!is.na(diabetes)) %>% \n  ggplot(aes(x = bmi, y = bp_sys_ave)) +\n  geom_point(na.rm = TRUE) +\n  facet_grid(rows = vars(diabetes))\n```\n\n::: {.cell-output-display}\n![](data-visualization_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nWe can also facet by `education` and use `age` as a colour. We'll have\nto `filter()` out those missing `education` values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot BMI in relation to systolic blood pressure, age, education and diabetes status\nnhanes_small %>%\n  filter(!is.na(diabetes), !is.na(education)) %>% \n  ggplot(aes(x = bmi, y = bp_sys_ave, colour = age)) +\n  geom_point(na.rm = TRUE) +\n  facet_grid(\n    rows = vars(diabetes),\n    cols = vars(education)\n  )\n```\n\n::: {.cell-output-display}\n![](data-visualization_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nBefore moving on, run `{styler}` (`Ctrl-Shift-P`, then type \"style file\") and then add\nand commit the new changes to the Git history (`Ctrl-Shift-P`, then type \"commit\"),\nand push to GitHub.\n\n## Colours: Make your graphs more accessible\n\n::: callout-note\n## Reading task: \\~5 minutes\n\nColour blindness is common in the general population, with red-green\ncolour blindness affecting about 8% of men and 0.5% of women. To make\nyour graph more accessible to people with colour blindness, you need to\nconsider the colours you use. For more detail on how colours look to\nthose with colour blindness, check out this\n[documentation](https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html)\nfrom the [viridis](https://cran.r-project.org/package=viridis) package.\nThe viridis colour scheme (also developed as an R package) was\nspecifically designed to represent data to all colour visions (including\nas a grayscale, e.g. from black to white). There is a really informative\n[talk on YouTube](https://www.youtube.com/watch?v=xAoljeRJ3lU) on this\ntopic.\n\nWhen using colours, think about what you are trying to convey in your\nfigure and how your choice of colours will be interpreted. You can use\nbuilt-in colour schemes or create your own. For now, let's stick to\nusing built-in ones. There are two we can start with: the viridis and\nthe [ColorBrewer](https://colorbrewer2.org/) colour schemes. Both are\nwell designed and are colour blind friendly. For this course, we will\nonly cover the viridis package.\n\n::: {.callout-tip appearance=\"default\"}\n### Other colour schemes in ggplot2\n\nYou can modify ggplot2 colour schemes using many other pre-defined\npalettes by installing new R packages, including scientific journal\ncolour palettes ([ggsci](https://nanx.me/ggsci/index.html)) and even a\nWes Anderson ([wesanderson](https://github.com/karthik/wesanderson)) or\na Stubio Ghibli ([ghibli](https://ewenme.github.io/ghibli/)) colour\npalette!\n:::\n:::\n\n## Exercise: Changing the colour schemes\n\n> Time: 10 minutes.\n\nPractice changing colour schemes on a bar plot. Start with a base plot\nobject to work from that has two discrete variables. Create a new\nMarkdown header called `## Exercise for changing colours` and create a\nnew code chunk (`Ctrl-Alt-I` for \"Insert\" or `Ctrl-Shift-P`, then type \"chunk\") below it. Copy\nand paste the code below into the new code chunk.\n\n``` r\n# Barplot to work from, with two discrete variables\nnhanes_small %>%\n  filter(!is.na(diabetes), !is.na(education)) %>% \n  ggplot(aes(x = diabetes, fill = education)) +\n  geom_bar(position = position_dodge()) +\n  ___\n```\n\nUse the `scale_fill_` function set to add the colour scheme. If you need\nhelp, use the `help()` or `?` functions in RStudio to look over the\ndocumentation for more information or to see the other `scale_`\nfunctions. Use tab auto-completion to find the correct function.\n\n1.  Change the colour to the `{viridis}` scheme with the\n    `scale_fill_viridis_d()` function, added to the end of the\n    `{ggplot2}` code so that the plot is colour blind friendly. Because\n    the variables are discrete, you will need to add `_d` to the end of\n    the `{viridis}` function.\n\n2.  `{viridis}` has several palettes. Add the argument\n    `option = \"magma\"` to the `scale_fill_viridis_d()` function. Run the\n    function again and see how the colour changes. Then, change\n    `\"magma\"` to `\"cividis\"`.\n\n3.  Now, let's practice using the colour schemes on a plot with\n    continuous variables. Copy and paste the code below into the code\n    chunk. Since we are using `colour` instead of `fill`, the `scale_`\n    will be `scale_colour_viridis_c()`. The `_c` at the end indicates\n    the variable are continuous.\n\n    ``` r\n    # Scatterplot to work from, with three continuous variables\n    nhanes_small %>%\n      ggplot(aes(x = bmi, y = bp_sys_ave, colour = age)) +\n      geom_point(na.rm = TRUE) +\n      scale_\n    ```\n\n4.  Similar to task 2 above, use the `option` argument to set the\n    palette to `\"inferno\"` and see how the colour changes. Select which\n    colour scheme you would like.\n\n5.  Run `{styler}` (`Ctrl-Shift-P`, then type \"style file\"). Then commit the changes to\n    the R Markdown file into the Git history (`Ctrl-Shift-P`, then type \"commit\").\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"**Click for the solution**. Only click if you are struggling or are out of time.\"}\n# 1. and 2.\nnhanes_small %>%\n  filter(!is.na(diabetes), !is.na(education)) %>% \n  ggplot(aes(x = diabetes, fill = education)) +\n  geom_bar(position = position_dodge()) +\n  scale_fill_viridis_d()\n  # scale_fill_viridis_d(option = \"magma\")\n\n# 3. \nnhanes_small %>%\n  ggplot(aes(x = bmi, y = bp_sys_ave, colour = age)) +\n  geom_point(na.rm = TRUE) +\n  scale_colour_viridis_c()\n  # scale_colour_viridis_c(option = \"inferno\")\n```\n:::\n\n\n## Titles, axis labels, and themes\n\nThere are so many options in RStudio to modify a `{ggplot2}` figure.\nAlmost all of them are found in the `theme()` function. We won't cover\nindividual theme items, since the `?theme` help page and [ggplot2 theme\nwebpage](https://ggplot2.tidyverse.org/reference/theme.html) already\ndocument `theme()` really well. Instead, we'll cover a few of the\nbuilt-in themes, as well as setting the axes labels and plot title.\nWe'll create base graph object to work with created `base_scatterplot`.\nAll built-in themes start with `theme_`.\n\nCreate a new section header called `## Changing plot appearance` and\nmake a new code chunk (`Ctrl-Alt-I` for \"Insert\" or `Ctrl-Shift-P`, then type \"chunk\"), then\ncopy the code below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create scatterplot to play with themes\nbase_scatterplot <- nhanes_small %>%\n  filter(!is.na(diabetes), !is.na(education)) %>% \n  ggplot(aes(x = bmi, y = bp_sys_ave, colour = age)) +\n  geom_point(na.rm = TRUE) +\n  facet_grid(\n    rows = vars(diabetes),\n    cols = vars(education)\n  ) +\n  scale_color_viridis_c()\n\n# View the plot with the default theme\nbase_scatterplot\n```\n\n::: {.cell-output-display}\n![](data-visualization_files/figure-html/built-in-themes-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Test out some pre-defined themes\nbase_scatterplot + theme_bw()\n```\n\n::: {.cell-output-display}\n![](data-visualization_files/figure-html/built-in-themes-2.png){width=672}\n:::\n\n```{.r .cell-code}\nbase_scatterplot + theme_minimal()\n```\n\n::: {.cell-output-display}\n![](data-visualization_files/figure-html/built-in-themes-3.png){width=672}\n:::\n\n```{.r .cell-code}\nbase_scatterplot + theme_classic()\n```\n\n::: {.cell-output-display}\n![](data-visualization_files/figure-html/built-in-themes-4.png){width=672}\n:::\n:::\n\n\nYou can also set the theme for all subsequent plots by using the\n`theme_set()` function, and specifying the theme you want in the\nparenthesis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set the theme for all subsequent plots\ntheme_set(theme_bw())\n```\n:::\n\n\nTo add labels such as axis titles to your plot, you can use the function\n`labs()`. To change the y-axis title, use the `y` argument in `labs()`.\nFor the x-axis, it is `x`. For the whole plot, it is `title`. Add a new\ncode chunk (`Ctrl-Alt-I` for \"Insert\" or `Ctrl-Shift-P`, then type \"chunk\") and type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add plot title and change axis titles\nbase_scatterplot +\n  labs(\n    title = \"BMI, systolic blood pressure, and age by diabetes and education\",\n    y = \"Systolic Blood Pressure (mmHg)\",\n    x = \"BMI (kg/m2)\"\n  )\n```\n\n::: {.cell-output-display}\n![](data-visualization_files/figure-html/labels-1.png){width=672}\n:::\n:::\n\n\n## Saving the plot\n\nTo save the plot you created, use the `ggsave()` function. The first\nargument says where to save the graph. Give the name of the newly\ncreated file, as well as the folder location. The next argument says\nwhich plot to save. At this point, you can set the dimensions of the\nfigure using the `width` and `height` arguments. Add a new section\nheader `## Saving the plot` and create a new code chunk:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save the plot\nggsave(here::here(\"doc/images/scatterplot.pdf\"),\n  base_scatterplot2,\n  width = 7, height = 5\n)\n```\n:::\n\n\nLastly, let's run `{styler}` (`Ctrl-Shift-P`, then type \"style file\"), render the\nQuarto document (`Ctrl-Shift-K` for \"Knit\" or `Ctrl-Shift-P`, then type \"render\"), commit the\nchanges (`Ctrl-Shift-P`, then type \"commit\"), and push to GitHub.\n\n## Summary\n\n-   Use the \"Grammar of Graphics\" approach in conjunction with the\n    `{ggplot2}` package within the `{tidyverse}` to plot your data.\n-   Prioritize plotting raw data instead of summaries whenever possible.\n-   `{ggplot2}` has 4 levels of grammar: `aes()` (which data to plot),\n    `geom_` (what kind of plot), `scale_` (to make the plot pretty), and\n    `theme()` (to control the specifics of the plot).\n-   Only use barplots for discrete values. If applying them on\n    continuous variables, it hides the distribution of the data.\n-   To plot more dimensions, use colour, the X axis, the Y axis, or\n    `facet_grid()`.\n-   Use colour blind-friendly palettes, such as `{viridis}`.\n-   Save plots using `ggsave()`.\n",
    "supporting": [
      "data-visualization_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}