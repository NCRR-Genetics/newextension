{
  "hash": "960bb2e1293ed5c95464f15c2ecbac8a",
  "result": {
    "markdown": "---\nexecute:\n  eval: false\n---\n\n\n# Extra exercises {#sec-extra-exercises}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(here::here(\"R/functions.R\"))\n```\n:::\n\n\n## Calculate some basic statistics\n\nPractice using `summarise()` by calculating various summary statistics.\nCopy and paste the code below into the `R/learning.R` script file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1.\nnhanes_small %>%\n    summarise(mean_bp_sys = ___,\n              mean_age = ___)\n\n# 2.\nnhanes_small %>%\n    summarise(max_bp_dia = ___,\n              min_bp_dia = ___)\n```\n:::\n\n\nThen, start replacing the `___` with the appropriate code to complete\nthe tasks below. Don't forget to use `na.rm = TRUE` in the basic\nstatistic functions.\n\n1.  Calculate the mean of `bp_sys_ave` and `age`.\n2.  Calculate the max and min of `bp_dia`.\n3.  Lastly, add and commit any changes made to the Git history with the\n    RStudio Git interface.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"**Click for the solution**. Only click if you are struggling or are out of time.\"}\n# 1.\nnhanes_small %>%\n    summarise(mean_bp_sys = mean(bp_sys_ave, na.rm = TRUE),\n              mean_age = mean(age, na.rm = TRUE))\n\n# 2.\nnhanes_small %>%\n    summarise(max_bp_dia = max(bp_dia_ave, na.rm = TRUE),\n              min_bp_dia = min(bp_dia_ave, na.rm = TRUE))\n```\n:::\n\n\n## Answer some statistical questions with group by and summarise\n\nCopy and paste the code below into the `R/learning.R` script file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1. \nnhanes_small %>% \n    filter(!is.na(diabetes)) %>% \n    ___(___, ___) %>% \n    ___(\n        ___,\n        ___,\n        ___\n    )\n\n# 2. \nnhanes_small %>% \n    filter(!is.na(diabetes)) %>% \n    ___(___, ___) %>% \n    ___(\n        ___,\n        ___,\n        ___,\n        ___,\n        ___,\n        ___\n    )\n```\n:::\n\n\nThen, start replacing the `___` with the appropriate code including\n`group_by()` with `summarise()`, to answer these questions:\n\n1.  What is the mean, max, and min differences in *age* between active\n    and inactive persons with or without diabetes?\n2.  What is the mean, max, and min differences in *systolic BP* and\n    *diastolic BP* between active and inactive persons with or without\n    diabetes?\n3.  Once done, add and commit the changes to the file to the Git\n    history.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"**Click for the solution**. Only click if you are struggling or are out of time.\"}\n# 1. \nnhanes_small %>% \n    filter(!is.na(diabetes)) %>% \n    group_by(diabetes, phys_active) %>% \n    summarise(\n        mean_age = mean(age, na.rm = TRUE),\n        max_age = max(age, na.rm = TRUE),\n        min_age = min(age, na.rm = TRUE)\n    )\n\n# 2. \nnhanes_small %>% \n    filter(!is.na(diabetes)) %>% \n    group_by(diabetes, phys_active) %>% \n    summarise(\n        mean_bp_sys = mean(bp_sys_ave, na.rm = TRUE),\n        max_bp_sys = max(bp_sys_ave, na.rm = TRUE),\n        min_bp_sys = min(bp_sys_ave, na.rm = TRUE),\n        mean_bp_dia = mean(bp_dia_ave, na.rm = TRUE),\n        max_bp_dia = max(bp_dia_ave, na.rm = TRUE),\n        min_bp_dia = min(bp_dia_ave, na.rm = TRUE)\n    )\n```\n:::\n\n\n## Practicing the dplyr functions\n\nPractice using `{dplyr}` by using the `NHANES` dataset and wrangling the\ndata into a summary output. Don't create any intermediate objects by\nonly using the pipe operator to link each task below with the next one.\n\n1.  Rename all columns to use snakecase.\n2.  Select the columns `gender`, `age` and `BMI`.\n3.  Exclude `\"NAs\"` from all of the selected columns.\n4.  Rename `gender` to `sex`.\n5.  Create a new column called `age_class`, where anyone under 50 years\n    old is labeled `\"under 50\"` and those 50 years and older are labeled\n    `\"over 50\"`.\n6.  Group the data according to `sex` and `age_class`.\n7.  Calculate the `mean` and `median` BMI according to the grouping to\n    determine the difference in BMI between age classes and sex.\n8.  Run `{styler}` on the file (`Ctrl-Shift-P`, then type \"style file\").\n9.  Add and commit changes to the Git history with the RStudio Git\n    interface (`Ctrl-Shift-P`, then type \"commit\").\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"**Click for the solution**. Only click if you are struggling or are out of time.\"}\nNHANES %>% \n    rename_with(snakecase::to_snake_case) %>% \n    select(gender, age,  bmi) %>% \n    filter(!is.na(gender) & !is.na(age) & !is.na(bmi)) %>% \n    rename(sex = gender) %>% \n    mutate(age_class = if_else(age < 50, \"under 50\", \"over 50\")) %>%\n    group_by(age_class, sex) %>% \n    summarize(bmi_mean = mean(bmi, na.rm = TRUE), \n              bmi_median = median(bmi, na.rm = TRUE))\n```\n:::\n",
    "supporting": [
      "extra-exercises_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}