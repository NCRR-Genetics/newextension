{
  "hash": "33b5a8c37c3ec4b2c1e56e3648ad2bfb",
  "result": {
    "markdown": "# Pre-course tasks {#sec-pre-course}\n\n\n::: {.cell}\n\n:::\n\n\nIn order to participate in this course, you must complete everything in\nthis pre-course tasks section and finish with **completing the\n[survey](https://docs.google.com/forms/d/e/1FAIpQLSeuMe485zZXlG9uQlUgcgsWBJvpHUB_-bMVkEtA4moWK_oUoQ/viewform?usp=sf_link)**\nat the end. These tasks are designed to make it easier for everyone to\nstart the course with everything set up. For some of the tasks, you\nmight not understand why you need to do them, but you will likely\nunderstand why once the course begins.\n\nDepending on your skills and knowledge, these tasks could take between\n**3-5 hrs to finish**, so we suggest planning a full day to complete\nthem. Depending on your institution and how they handle installing\nsoftware on work computers, you also might have to contact IT *very\nearly* to make sure everything is properly installed and setup.\n\n## Summary of tasks\n\nHere's a quick overview of the tasks you need to do. Specific details\nabout them are found as you work through the tasks.\n\n1.  Install a version of R, RStudio, Quarto, and Git that is as updated\n    as possible. For some people, depending on their institution, this\n    task can take the **longest amount of time** because you have to\n    contact your IT to install these packages.\n2.  Install necessary R packages.\n3.  Read about and become familiar with RStudio.\n4.  Read some of the course sections on Git.\n5.  Configure Git on your computer and create a GitHub account.\n6.  Run a check to see if everything works (you'll later need to paste\n    this output into the survey).\n7.  Read the syllabus (@sec-syllabus).\n8.  Read the [Code of\n    Conduct](https://guides.rostools.org/conduct.html).\n9.  Complete the pre-course\n    [survey](https://docs.google.com/forms/d/e/1FAIpQLSeuMe485zZXlG9uQlUgcgsWBJvpHUB_-bMVkEtA4moWK_oUoQ/viewform?usp=sf_link).\n    This survey is pretty quick, maybe \\~10 minutes. There will be some\n    bits from the tasks that you will need to paste into this survey.\n\nCheck each section for exact details on completing these tasks.\n\n## Learning objective\n\nIn general, these pre-course tasks are meant to help prepare you for the\ncourse and make sure everything is setup properly so the first session\nruns smoothly. However, some of these tasks are meant for learning as\nwell as for general setup, so we have defined the following learning\nobjectives for this page:\n\n1.  Describe what R is, how it fits within a research environment, and\n    why researchers increasingly use it.\n2.  Navigate some of the basic uses and features of RStudio, as well as\n    understand the difference between R and RStudio.\n3.  Explain the differences between R code, R functions, R scripts, and\n    R packages, and how we will use each of them.\n4.  Become aware of the `{tidyverse}` set of packages, which we will be\n    teaching mostly in this course.\n5.  Become aware of what version control is and what Git is.\n\n## Reading the course website\n\nWe will explain this a bit during the course, but read this to start\nlearning how the website is structured and how to read certain things.\nSpecifically, there are a few \"syntax\" type formatting of the text in\nthis website to be aware of:\n\n-   Folder names always end with a `/`, for example `data/` means the\n    data folder.\n-   R variables are always shown as is. For instance, for the code\n    `x <- 10`, `x` is a variable because it was assigned with 10.\n-   Functions always end with `()`, for instance `mean()` or\n    `read_csv()`.\n-   Sometimes functions have their package name appended with `::` to\n    indicate to run the code from the specific package, since we likely\n    haven't loaded the package with `library()`. For instance, to\n    install packages from GitHub using the `{remotes}` package we use\n    `remotes::install_github()`. You'll learn about this more later.\n-   Reading tasks always start with a statement \"Reading task\" and are\n    enclosed in a \"callout block\". Read within this block. We will\n    usually go over the section again to reinforce the concepts and\n    address any questions.\n\n## Installing the latest programs\n\nThe first thing to do is to install these programs. You may already have\nsome of them installed and if you do, please make sure that they are at\nleast the minimum versions listed below. If not, you will need to update\nthem.\n\n1.  Have the latest version of\n    [R](https://cloud.r-project.org/index.html) installed (or at least\n    any version above `4.1.2`). If you have used R and RStudio before,\n    you can confirm the version by running `R.version.string` in the\n    console, otherwise, just install the latest version.\n2.  Have the latest version of\n    [RStudio](https://www.rstudio.com/products/rstudio/download/#download)\n    installed (or at least any version above `v2021.09.0+351`). Check by\n    going to the menu `Help -> About RStudio` (if you have used RStudio\n    before, otherwise, just install the latest version).\n3.  [Quarto](https://quarto.org/docs/get-started/). This is necessary\n    for the reproducible documents session.\n4.  Install [Git](https://git-scm.com/downloads). We'll use this\n    throughout the course.\n5.  For some Windows users, you may need to install\n    [Rtools42](https://cran.r-project.org/bin/windows/Rtools/rtools42/rtools.html)\n    (direct download link\n    [here](https://cran.r-project.org/bin/windows/Rtools/rtools42/files/rtools42-5355-5357.exe))\n    in order for some R packages to be successfully installed (which\n    you'll do shortly). For some computers, installing Rtools can take\n    some time. *You need this in order for some packages to work.*\n\nAll these programs are required for the course, even Git. Git, which is\na software program to formally manage versions of files, is used because\nof it's popularity and the amount of documentation available for it. At\nthe end of the course, you will be using Git and GitHub to manage your\ngroup assignment. Check out the online book [Happy Git with\nR](https://happygitwithr.com/), especially the \"Why Git\" section, for an\nunderstanding on why we are teaching Git. Windows users tend to have\nmore trouble with installing Git than macOS or Linux users. See the\nsection on [Installing Git for\nWindows](https://happygitwithr.com/install-git.html#install-git-windows)\nfor help.\n\n> *A note to those who have or use work laptops with restrictive\n> administrative privileges*: You may encounter problems installing\n> software due to administrative reasons (e.g. you don't have permission\n> to install things). Even if you have issues installing or updating the\n> latest version of R or RStudio, you will likely be able to continue\n> with the course as long as you have the minimum version listed above\n> for R and for RStudio. If you have versions of R and RStudio that are\n> older than that, you may need to ask your IT department to update your\n> software if you can't do this yourself. Unfortunately, Git (and\n> Quarto) is not a commonly used software for some organizations, so you\n> may not have it installed and you *will* need to ask IT to install it.\n> We *require* it for the course, so please make sure to give IT enough\n> time to be able to install it for you prior to the course.\n\nOnce R, RStudio, Quarto, and Git have been installed, open RStudio. *If\nyou encounter any troubles during these pre-course tasks*, try as best\nas you can to complete the task and then let us know about the issues in\nthe pre-course survey. If you continue having problems, indicate on the\nsurvey that you need help and we can try to book a quick video call to\nfix the problem. Otherwise, you can come to the course 15-20 minutes\nearlier to get help.\n\nIf you're unable to complete the setup procedure due to unfixable\ntechnical issues, you can use Posit Cloud (to use RStudio on the cloud)\nas a final solution in order to participate in the course. For help\nsetting up Posit Cloud for this course, refer to the [Posit Cloud setup\nguide](https://guides.rostools.org/posit-cloud.html).\n\n## What is R?\n\nDuring this course, we will be spending most of our time in RStudio.\nRStudio is an \"environment\" that we use to interact with R. R is like an\nengine, while RStudio is like the tools we use to actually work with\nthat engine. Prior to taking a look at what RStudio looks like, let's\ntalk briefly about R as a programming language.\n\nR is a free programming language/environment used in statistical\ncomputing, data analytics, and scientific research. R is used to clean,\norganize, analyze, and report on data. R has powerful visualization\nfeatures, so it is a particularly useful tool for creating charts and\nfigures. R is different from SPSS and other statistical programs in that\nyou run analyses by typing commands in a console rather than using\nclick-based, drop-down menus.\n\nIn recent years, R has become one of the most popular languages among\nstatisticians and data scientists for several reasons:\n\n-   It is open source, so you are able to see how exactly a, for\n    instance, statistical method works.\n-   It runs on all platforms (Windows, macOS, Linux).\n-   It is highly compatible with other programming languages.\n-   It provides access to a vast amount of packages that can complete\n    nearly any task or statistical approach.\n-   There is a huge online community to help you problem-solve any\n    issue.\n-   It is free, which means you can continue using the skills you gain\n    in R throughout your entire career without worrying about expensive\n    licensing fees (for example, if your employer can't or doesn't pay\n    for the software).\n\nHowever, like many programming languages, R is not easy to learn. Some\nfunctions are spread across packages, which means that you need to have\nprior knowledge of packages in order to implement some commands. R can\nalso be slower than other programming languages. Nonetheless, R offers\nsuch a supportive community and rich functionality that it is worth the\nchallenge!\n\n## Getting familiar with RStudio\n\nLet's start learning about RStudio and how to use it. Check out\n@fig-rstudio-introduction below. You can see that RStudio has four\n\"panels\", dividing the screen into the four sections.\n\n> **Note**: This image, along with the other images and videos below,\n> may look slightly different from your own computer depending on your\n> operating system and other settings.\n\n![Interface to\nRStudio.](../images/rstudio-introduction.png){#fig-rstudio-introduction}\n\nWhile you can customize where the individual panels go, the default\nlayout is how the panels are shown.\n\n-   Panel \"A\" is the panel that shows the \"scripts\", which we will be\n    using a lot during the course. You *may or may not see this panel*\n    when you open RStudio for the first time. This panel is where you\n    write R code that will be saved as a file.\n-   Panel \"B\" is the Console. This is where R commands are sent and\n    evaluated by R. This is the \"engine\". No R code written here is\n    saved. Almost all of the tasks in this course will be entered\n    through the Console.\n-   Panel \"C\" contains the Environment, History, Connections, and Git\n    tabs. In this course, we will only be using the Environment and Git\n    tab.\n-   Panel \"D\" has the Files, Plots, Packages, Help, Build, and Viewer\n    tabs. For this course, we will only be going over the Files, Plots,\n    Packages, and Help tabs. There can be slight differences in your\n    layout of tabs in each panel.\n\nWhile we will spend part of the course using an R script to play around\nwith code, we will also be learning and using [R\nMarkdown](https://rmarkdown.rstudio.com/) / [Quarto](https://quarto.org)\n(`.Rmd` or `.qmd` files). R Markdown / Quarto is a dynamic and\ninvaluable tool that will help make your analysis more reproducible.\nQuarto is an upgraded version of R Markdown but can also use R Markdown.\nThroughout the rest of the course, we will write and talk about Quarto,\nbut we mean both Quarto and R Markdown. We will explain this in more\ndetail in @sec-reproducible-documents.\n\nQuarto allows you to interweave chunks of code along with text and\nimages. R runs the code and inserts the code output into the Quarto\nfile. The Quarto document can be converted into a wide range of document\ntypes, including MS Word, PDF, or HTML. Some researchers write and\nmanage entire papers, theses, websites, or books using Quarto, as it can\nmake things easier to organize and maintain. In fact, this website is\nwritten with Quarto.\n\n## Installing R packages\n\nNow that you have RStudio and R on your computer, we need to install the\nR packages we'll use in the course. R packages are bundles of R code\nthat other people have written. There are so many R packages available\nthat there is likely an R package for anything you'd like to do in R.\nMaking use of R packages can greatly help you out when doing your\nresearch.\n\nBefore we continue, we need to briefly explain what some terms mean.\n\n-   **R code** is any individual piece of text that R interprets as\n    commands to do something. For instance, `mean()` is a complete piece\n    of text that tells R to calculate the mean of some numbers.\n    -   R code is essentially split into two types: objects (like a\n        dataset) or actions (called functions). For the most part,\n        whenever you see code with `()` at the end (at least in this\n        course), that means it is a function.\n    -   A function is a set of bundled R code that performs a specific\n        task. Like the example `mean()` above.\n-   **R script** is any file with the ending `.R` that contains R code\n    that completes tasks in a sequence (from the top of the file to the\n    bottom).\n-   **R package** is a set of R scripts that contain multiple bundles of\n    R code (mostly these bundles are functions, but can sometimes be\n    data) that work together to expand on or improve R code and R\n    functionality.\n\nFor this course, we will be focusing on R packages that are powerful and\ngeneral-purpose enough to help you in multiple aspects of your research.\nTo install these packages, we'll need to install the r3 helper package.\nFor that, we'll need to first install the `{remotes}` package. Watch the\nvideo below to see how to do this:\n\n<!-- TODO: Switch to using pak instead of remotes. -->\n\n\n{{< video ../videos/rstudio-installing-remotes.mp4 >}}\n\n\n\nCopy and paste the function below into the RStudio Console. Hit Enter\nand the r3 helper package will be installed. Watch the video below to\nsee how to do this:\n\n``` r\nremotes::install_github(\"rostools/r3\", upgrade = TRUE)\n```\n\n\n{{< video ../videos/console-installing-r3.mp4 >}}\n\n\n\nIt is important to understand what you are doing when you enter a\nfunction like `something::something()`. In the example of\n`remotes::install_github()`, you would \"read\" this as:\n\n> R, can you please use the `install_github` function from the\n> `{remotes}` package?\n\nYou could load the package with `library(remotes)` and then run the\n`install_github()` function. However, using the `::` (pronounced \"colon\ncolon\") tells R that we want to use a function directly from a package.\nWe prefer this way as we only want to use the `install_github()`\nfunction from the remotes package without having to load all the other\nfunctions. We will be using `::` often during this course.\n\nMost of the packages we will be using in this course are bundled\ntogether into one package called `{tidyverse}`. This package is a\ncollection of packages that are designed for common tasks in data\nscience, ranging from data exploration to data visualization. As the\nname suggests, `{tidyverse}` is an attempt to organize the \"universe\" of\ndata analysis by providing packages that guide workflows and lead to\nmore reproducible analysis projects. To install all the packages we will\nuse for this course, copy and paste this command into the R Console:\n\n``` r\nr3::install_packages_introduction()\n```\n\nLike with the installing of r3 in the video above, this will take some\ntime to install everything. Normally, to install packages, you would\ntype this in the Console (you **don't** need to do this):\n\n``` r\ninstall.packages(\"tidyverse\")\n```\n\nThe specific packages from tidyverse that we will use are `{ggplot2}`\nand `{dplyr}`. These packages provide a set of tools for the most common\ndata analysis tasks and have excellent documentation and tutorials on\nhow to use them.\n\n-   `{dplyr}` (along with a complementary package `{tidyr}`) is a\n    package that is very popular and contains important data\n    manipulation functions, including functions that select and/or\n    create variables depending on certain conditions. `{dplyr}` is built\n    to work directly with data frames (rectangular data like those found\n    in spreadsheets), and has an additional feature to interact directly\n    with data stored in an external database such as in SQL. Working\n    with databases is a powerful way to work with massive datasets (100s\n    of GB), more than what your computer could normally handle. Working\n    with massive data won't be covered in this course, but see this\n    [resource from Data\n    Carpentry](https://datacarpentry.org/R-ecology-lesson/05-r-and-databases.html)\n    to learn more.\n\n-   `{ggplot2}` is a data visualization package that can be used to\n    create bar charts, pie charts, histograms, scatterplots, error\n    charts, and more. It uses a \"grammar\" as a way to construct and\n    customize your graphs in a layered, descriptive approach.\n\n## Setting up Git and GitHub\n\nWe'll cover more about Git and GitHub during the course, but for now,\nplease read @sec-what-is-version-control, @sec-what-is-git, and\n@sec-basics-of-git. During the course you will read them again and we\nwill verbally explain it in more detail. Why repeat this twice? Because\nGit and version control are some of the more difficult things you will\nlearn in this course and because they are fundamentally very different\nways of working in your computer than you are probably used to. They\nrequire changing how you see and interact with your projects and\ncomputer in pretty big ways. So we want you to read this now so you can\nstart to mentally process the concepts we will cover. Then we'll get you\nto read it again during the course, to reinforce the concepts.\n\nAfter reading about Git, we need you to prepare things so that you are\nready for the course. In order to use Git properly, you need to inform\nyour computer that you are using Git. The r3 course helper package has a\nfunction to help with this. Type in the RStudio Console:\n\n``` r\nr3::setup_git_config()\n```\n\nHit enter and follow the instructions. Finally, type and run this next\nfunction to make sure everything is working with your setup. When you\ncomplete the survey later, you will need to copy and paste the output of\nthis function.\n\n``` r\nr3::check_setup()\n```\n\nAfter you are done, you need to [create a GitHub\naccount](https://github.com/join). See @fig-github-account-creation for\na demonstration of how to do that. Make note of your username, as we\nwill ask you for it in the pre-course survey. Make sure to **remember\nyour password**, either write it down somewhere or (even better) use a\n[password manager](https://en.wikipedia.org/wiki/Password_manager) to\nstore your password for you.\n\n> Note: *GitHub* is a company and website, while *Git* is a software.\n> There is sometimes confusion about these two things since they both\n> say \"Git\". It's important to distinguish that they are two *separate*\n> things.\n\n<!-- TODO: Convert to video. -->\n\n![Creating a GitHub\naccount.](../videos/github-account-creation.gif){#fig-github-account-creation}\n\n## Course introduction\n\nMost of the description of the course is found in the syllabus\n(@sec-syllabus). While you may have signed up to this course to learn\nmore about R, you should know that conducting reproducible research goes\nbeyond R and RStudio. As such, we will be spending a lot of time\nexploring other tools that are used in conjunction with R, to improve\nthe structure and transparency of your work. This course is designed to\nnot only introduce you to R, but also to show ways of conducting\nreproducible research and data analysis in R.\n\nIf you haven't read the syllabus, **please read it now**. Read over what\nthe course will cover, what we expect you to learn by the end of it, and\nwhat our basic assumptions are about who you are and what you already\nknow. At the end of this section, we'll ask you a few questions to see\nif you understand what you'll learn in the course.\n\nOne goal of the course is to teach about open science, and true to our\nmission, we practice what we preach. The course material is publicly\naccessible (all on this website) and [openly licensed](/LICENSE.md) so\nyou can (re-)use it for free! The material is organized in the order\nthat we will cover it in the course.\n\nWhile the course will include lots of hands-on work during the sessions,\nthe final group project assignment (@sec-assignment) will allow you to\npractice everything you've learned in a team setting. **Please read it**\nto get familiar with what is expected of you.\n\nWe have a [Code of Conduct](https://guides.rostools.org/conduct.html).\nIf you haven't read it, **read it now**. The survey involves a question\nabout Conduct. We want to make sure this course is a supportive and safe\nenvironment for learning, so this Code of Conduct is quite important.\n\nYou're almost done. Please fill out the pre-course survey to finish this\nsection, either [at this\nlink](https://docs.google.com/forms/d/e/1FAIpQLSeuMe485zZXlG9uQlUgcgsWBJvpHUB_-bMVkEtA4moWK_oUoQ/viewform?usp=sf_link).\n\nSee you at the course!\n",
    "supporting": [
      "pre-course_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}